


remove equipment item check!!!!!



check buy&sell!!!


L key => relation dialog

family packet
=>  CharacterInfo.cs 
=>  Load
=>  Married = reader.ReadInt32();
    MarriedDate = DateTime.FromBinary(reader.ReadInt64());
    //k333123 add family char index info



other char dont move => because human using ExAction.ONEHAND_STAND and other using ExAction.Standing and action queue applied ExAction.Standing...(even other player..)
//private void ObjectTurn(ServerPacket.ObjectTurn p)
                if (ob is PlayerObject) //add 240926 k333123
                {
                    ob.ActionFeed.Add(new QueuedAction { Action = ExAction.ONEHAND_STAND, Direction = p.Direction, Location = p.Location });
                }
                else
                {
                    ob.ActionFeed.Add(new QueuedAction { Action = ExAction.Standing, Direction = p.Direction, Location = p.Location });
                }




0)cursor!
1)keymap remove!
2)old resource remove!
3)remove hero
4)remove pet


FrameSet Change
->PlayerObject.cs
->ExineMainScene.cs -> Player!!!


//ADD Skill
Shared/Enums.cs > Spell add skill
Envir.cs => FillMagicInfoList add skill
Add Item (book,) and Shape = Shared/Enums.cs.Spell number



 case Spell.Healing:
     Effects.Add(new Effect(Libraries.Magic, 200, 10, Frame.Count * FrameInterval, this));
     SoundManager.PlaySound(20000 + (ushort)Spell * 10);
     break;



 MapControl.Effects.Add(new Effect(Libraries.Effect, 671, 6, 720, FishingPoint) { Light = 0 });

 pwan 
//effect2 58~67 pawn
=> map 10000 position : 78,88 clear front limit!!!!!!!

saint
622~+10


949~958
959~967
968~976

shared > Globals.cs >  public static Spell[] RangedSpells = new Spell[]
    {
        Spell.FireBall,
        Spell.ThunderBolt,
        Spell.FireBang,
        Spell.FireWall,
        Spell.FrostCrunch,
        Spell.Vampirism,
        Spell.FlameDisruptor,
        Spell.IceStorm,
        Spell.MeteorStrike,
        Spell.Blizzard,
        Spell.SoulFireBall
    };





    Cast Check
    Server.library > HumanObject.cs >     public void Magic(Spell spell, ExineDirection dir, uint targetID, Point location, bool spellTargetLock = false) > Switch case > default : Cast=false;
































Map Static Object Image -> Tile Cutter -> tile lib(if tile is all alpha, add empty image) -> front layer apply
Convert Exine map to Exine-X map -> Apply Front Layer from Tile Cutter map or Add Front Layer Overwrite Button!

Client Map Draw : private void MapInformation(ServerPacket.MapInformation p)


 public sealed class MapControl : ExineControl

  
  public const int CellWidth = 48;
        public const int CellHeight = 32;

        MapCode


        MLibrary.cs => MapLibs Change!












how to learn Skill
sinjun : auto - stat & stat reset
dae jesajang aron - skill select(select two skill tree)

how to use skill
1)drag skill icon on skill page to skill bar
2)right mouse button click to target
















npc speech
[SPEECH]
10 test...




Shanda has anitile


Client Project Output : Console Application


ActionTree - 0~22 : Skill Tree

--------------
panel100 - 0   => 초상화, 링명, ???, 칭호, 캐릭명, 레벨
panel100 - 33 => HP이미지
panel100 - 34 => MP이미지
--------------
panel200 - 0 => 벨트
panel200 - 1~4 : 평화모드 버튼 프레스 등(3번 프레스)
panel200 - 5~8 : 전투모드 버튼 프래스 등(7번 프레스)
panel200 - 9~12 : 벨트 중간 위 버튼(11번 프레스)
panel200 - 13~16 : 벨트 중간 아래 버튼(15번 프레스)
panel200 - 17~20 : 벨트 우측 버튼(?모드1, 19번 프레스)
panel200 - 21~24 : 벨트 우측 버튼(?모드2, 23번 프레스)
panel200 - 25~40 : 벨트 우측 버튼의 왼쪽 버튼 (??? 버튼) 의미?
--------------
panel201 - 0 => 대화창
panel201 - 1 => 대화창 확장
panel201 - 2~5 => 대화창 확장 버튼(4번 프레스)
panel201 - 6 => 대화창 스크롤 버튼(상)
panel201 - 7 => 대화창 스크롤 버튼(하)
panel201 - 8 => 대화창 스크롤 포지션
panel201 - 9 => 대화창 스크롤 버튼(상) 오버롤
panel201 - 10 => 대화창 스크롤 버튼(상) 프레스
panel201 - 11 => 대화창 스크롤 버튼(하) 오버롤
panel201 - 12 => 대화창 스크롤 버튼(하) 프레스
panel201 - 13 => 대화창 스크롤 포지션(오버롤)
panel201 - 14 => 경험치 바
--------------
panel202 - 0 => 대화입력창(엔터 누를때만 나옴)
panel202 - 1~8 =>말하기 모드(5~8 프레스)
-> 3명까지 지정해서 말하기 가능한듯함. 
panel202 - 41~48 =>상대방지정버튼1(45~48 프레스)
panel202 - 49~56 =>상대방지정버튼2(53~56 프레스)
panel202 - 57~64 =>상대방지정버튼3(61~64 프레스)

panel202 - 9~16 =>외치기 모드
panel202 - 17~24 =>파티말하기 모드
panel202 - 25~32 =>귓속말 모드
panel202 - 33~40 =>링 말하기 모드

--------------
panel203 - 0 => 케릭터 머리 위 대사창
panel204 - 0 => 아이템 퀵슬롯칸?
panel205 - 0 => 마법/스킬 퀵슬롯칸?
--------------
panel300 - 0 => 상대방 선택시 표시칸
panel300 - 33~36 => 교환버튼(35 : 프레스, 36 오버롤)
--------------
panel301 - 0 => 미니맵 표시
--------------
panel400 - 0~23 : ??? 선택메뉴
panel401 - 0~3 : NPC 선택메뉴(대화 normal, overroll, pressed, disable)
panel401 - 4~7 : NPC 선택메뉴(거래? normal, overroll, pressed, disable)
panel401 - 8~11 : NPC 선택메뉴(수리? normal, overroll, pressed, disable)
panel401 - 12~15 : NPC 선택메뉴(취소 normal, overroll, pressed, disable)
panel401 - 16~19 : NPC 선택메뉴(보기 normal, overroll, pressed, disable)
panel401 - 20~23 : NPC 선택메뉴(달리기??? normal, overroll, pressed, disable)
--------------
panel500 - 0 : 정보창
panel500 - 1~24 : 정보창 특성치 할당 버튼(힘~운)
--------------
panel504 - 0 : 링 창
panel504 - 1~52 : 링 관련 버튼
--------------
panel505 - 0 : 가족 창
panel505 - 1~16 : 가족 관련 버튼
--------------
panel506 - 0 : 칭호 창
panel506 - 1~144 : 칭호 관련 버튼
--------------
panel503 - 0~7 : 정보창 - status탭버튼
panel503 - 8~15 : 정보창 - ring탭버튼
panel503 - 16~23 : 정보창 - family탭버튼
panel503 - 24~31: 정보창 - aka탭버튼
panel503 - 32~35 : 정보창 - 닫기 버튼
--------------
panel501 - 0 : 상점 거래창
panel501 - 1~117: 상점 거래창 버튼등
--------------
panel502 - 0 : 창고창
panel502 - 1~20 : 창고창 버튼등
--------------
panel507 - 0 : 교환창
panel507 - 1~20 : 교환창 버튼등
--------------
panel509 - 0 : 퀘스트창
panel509 - 1~44 : 퀘스트창 버튼등
--------------
panel510 - 0 : NPC 대화창
panel510 - 1~12 : NPC 대화창 버튼
--------------
panel511 - 0 : NPC 대화창-전체보기?
panel511 - 1~12 : NPC 대화창-전체보기?버튼
--------------
panel512 - 0 : 제조창
panel512 - 1~12 : 제조창 버튼
--------------
panel600 - 0 : 장비창
panel600 - 1~92 : 장비창 버튼
--------------
panel601 - 0 : 기술 스킬포인트 메인창
panel601 - 1~232 : 기술 스킬포인트 메인창 버튼
--------------
panel602 - 0 : 마법 스킬포인트 메인창
panel602 - 1~232 : 마법 스킬포인트 메인창 버튼
--------------
panel603 - 0 : 생산 스킬포인트 메인창
panel603 - 1~236 : 생산 스킬포인트 메인창 버튼
--------------
panel604 - 0 : 링 전수 삭제 메인창?
panel604 - 1~8 : 링 전수 삭제 메인창? 버튼
--------------
panel605 - 0 : 창조 전수 삭제 메인창?
panel605 - 1~8 : 창조 전수 삭제 메인창? 버튼
--------------
panel606 - 0~7 :  마법탭(스킬포인트)
panel606 - 8~15 :  기술탭(스킬포인트)
panel606 - 16~23 :  생산탭(스킬포인트)
panel606 - 24~31 :  링탭(스킬포인트)
panel606 - 32~39 :  창조탭(스킬포인트)
panel606 - 40~43 :  종료버튼(스킬포인트)
--------------
panel700~709 - 0 : 파티상태 표시창
panel700~709 - 1 : 파티상태 (HP)
panel700~709 - 2 : 파티상태 (MP)
--------------
panel710 - 0~12 : 파티장 관리 버튼
--------------
panel800 - 0 : 교환 수량 입력창
panel800 - 1~8 : 교환 수량 입력창 버튼
--------------
panel900 - 0 :친구관리창등
panel900 - 1~44 :친구관리창등 버튼
--------------
panel901 - 0 :상용구 세팅창
--------------
panel902 - 0 :게임 옵션 세팅창
panel902 - 1~28 :게임 옵션 세팅창
--------------
panel903 - 0 :친구리스트
--------------
panel904 - 0 :귓말 거부 대상
--------------
panel905 - 0 :유저리스트 추가,갱신
--------------
panel1000 - 0~19 :시스템 메뉴선택 버튼(게시판, 가이드, 옵션, 끝내기, 게임으로 가기)
--------------
panel1100 - 0:데니 교환창
panel1100 - 1~8:데니 교환창
--------------
panel1200 - 0~7 : ??상/하 화살표
--------------

--------------
SayFrame - 0 : 케릭터 머리 위 대사창의 초상화
SayFrame - 1 : 케릭터 머리 위 대사창의 초상화 오른쪽 아래 일부
SayFrame - 2 : 비어있음
--------------
ScriptButton - 0~11 : 스크립트 버튼
--------------
ScriptScrollButton - 0~7 : 스크립트 스크롤 버튼
--------------
ScriptScrollBar - 0~7 : 스크립트 스크롤 버튼
--------------
Shadow - 0~7 : 그림자(5, 6, 7)
--------------
SubNameTitle - 0 : 케릭터 위 링 이름 앞 아이콘
SubNameTitle - 1 : ???이름 앞 아이콘
SubNameTitle - 2 : ??? 이름 앞 아이콘(칭호?)
--------------
Target - 0~5 : 선택 타겟 표시
--------------
UserInput : 입력버튼 ?
--------------
UserListSortBy : 유저리스트 소팅 버튼?
------------------
CorverIcon : 초상화부분, 아이콘 부분 빈칸.


NPC Portrait
00 empty
01 yj
02 JACK
03 SN
04 gamjung
05 sin jun sang in
06 sin jun sang in
07 auto (sin jun sang in)
08 Fight Zone Admin
09 might(djji)
10 Guard
11 Guard
12 Guard
13 Gn, TelN
14 Jangin
15 empty
16 hdrd
17 ygji
18 ???????
19 JabHwa?
20 LuiLui
21 jjji
22 Gy, TelY
23 JDS(Lupia)
24 ma sang
25 AKsae
26 ELF
27 empty
28 Antonio
29 DJJI Wife
30 Bank N
31 Bank Y
32 miyoung



10000 99 39 15 아르케잡화점
10000 106 31 15 아르케피복점
10000 114 31 15 아르케대장간
10000 114 63 15 아르케시약점
10000 119 54 15 아르케보석점
10000 140 45 15 아르케주점
10000 138 62 15 아르케제재소
10000 29 31 15 아르케북문
10000 77 58 15 아르케시청
10000 37 129 15 명예의대지입구
10000 112 118 15 아르케남문
10000 146 19 15 신전입구
10100 12 16 15 아르케남문
10100 63 84 15 벨러의해안
10101 8 13 15 아르케마을남부
10101 73 12 15 코리키온해안
10101 73 82 15 코리키온해안
10101 27 92 15 벨러의거상
10102 6 15 15 벨러의해안
10102 6 87 15 벨러의해안
10102 26 63 15 코리키온던젼입구
10300 78 95 15 아르케북문
10300 6 16 15 트리고숲서부
10300 82 10 15 아르케마을북부2
10301 29 30 15 반트던젼입구
10301 80 86 15 아르케마을북부
10301 78 11 15 헤스페리스의정원
10302 57 62 15 카룬던젼입구
10302 11 79 15 헤스페리스의정원
10303 5 24 15 헤스페리스의정원
10303 48 28 15 로비아탈던젼입구
10304 6 48 15 트리고숲서부
10304 22 10 15 트리고숲북부
10304 80 56 15 트리고숲동부
10306 6 48 15 아르케마을북부

{"mapId": 10000, "x": 28, "y": 33}
{"mapId": 10000, "x": 29, "y": 32}
{"mapId": 10000, "x": 29, "y": 33}
{"mapId": 10000, "x": 29, "y": 34}

{"mapId": 10000, "x": 36, "y": 139}
{"mapId": 10000, "x": 37, "y": 137}
{"mapId": 10000, "x": 37, "y": 138}
{"mapId": 10000, "x": 37, "y": 139}
{"mapId": 10000, "x": 37, "y": 140}

{"mapId": 10000, "x": 101, "y": 45}
{"mapId": 10000, "x": 102, "y": 44}

{"mapId": 10000, "x": 107, "y": 36}
{"mapId": 10000, "x": 108, "y": 35}
{"mapId": 10000, "x": 108, "y": 36}
{"mapId": 10000, "x": 112, "y": 127}
{"mapId": 10000, "x": 112, "y": 128}
{"mapId": 10000, "x": 112, "y": 129}
{"mapId": 10000, "x": 112, "y": 130}
{"mapId": 10000, "x": 113, "y": 37}
{"mapId": 10000, "x": 113, "y": 38}
{"mapId": 10000, "x": 113, "y": 70}
{"mapId": 10000, "x": 113, "y": 128}
{"mapId": 10000, "x": 113, "y": 129}
{"mapId": 10000, "x": 114, "y": 71}
{"mapId": 10000, "x": 114, "y": 128}
{"mapId": 10000, "x": 119, "y": 61}
{"mapId": 10000, "x": 120, "y": 61}
{"mapId": 10000, "x": 125, "y": 88}
{"mapId": 10000, "x": 137, "y": 54}
{"mapId": 10000, "x": 137, "y": 55}
{"mapId": 10000, "x": 141, "y": 71}
{"mapId": 10000, "x": 141, "y": 72}
{"mapId": 10000, "x": 146, "y": 12}
{"mapId": 10000, "x": 146, "y": 13}
{"mapId": 10000, "x": 146, "y": 14}
{"mapId": 10000, "x": 147, "y": 12}
{"mapId": 10000, "x": 147, "y": 13}
{"mapId": 10000, "x": 147, "y": 14}
{"mapId": 10000, "x": 148, "y": 14}
{"mapId": 10000, "x": 148, "y": 15}
{"mapId": 10000, "x": 149, "y": 15}
{"mapId": 10000, "x": 149, "y": 16}
{"mapId": 10000, "x": 150, "y": 16}
{"mapId": 10000, "x": 150, "y": 17}


{"mapId": 10001, "x": 20, "y": 38}
{"mapId": 10001, "x": 20, "y": 39}
{"mapId": 10001, "x": 21, "y": 39}
{"mapId": 10001, "x": 29, "y": 17}
{"mapId": 10001, "x": 29, "y": 18}
{"mapId": 10001, "x": 30, "y": 18}


{"mapId": 10002, "x": 29, "y": 17}
{"mapId": 10002, "x": 29, "y": 18}
{"mapId": 10002, "x": 30, "y": 18}


{"mapId": 10005, "x": 23, "y": 26}
{"mapId": 10005, "x": 24, "y": 25}
{"mapId": 10005, "x": 24, "y": 26}
{"mapId": 10005, "x": 25, "y": 25}


{"mapId": 10006, "x": 14, "y": 26}
{"mapId": 10006, "x": 15, "y": 26}
{"mapId": 10006, "x": 15, "y": 27}


{"mapId": 10007, "x": 24, "y": 26}
{"mapId": 10007, "x": 25, "y": 25}
{"mapId": 10007, "x": 25, "y": 26}


{"mapId": 10008, "x": 15, "y": 28}
{"mapId": 10008, "x": 15, "y": 29}
{"mapId": 10008, "x": 16, "y": 29}
{"mapId": 10008, "x": 16, "y": 30}


{"mapId": 10009, "x": 22, "y": 28}
{"mapId": 10009, "x": 23, "y": 27}
{"mapId": 10009, "x": 23, "y": 28}
{"mapId": 10009, "x": 24, "y": 27}


{"mapId": 10010, "x": 10, "y": 87}
{"mapId": 10010, "x": 11, "y": 87}
{"mapId": 10010, "x": 11, "y": 88}
{"mapId": 10010, "x": 12, "y": 88}
{"mapId": 10010, "x": 12, "y": 89}


{"mapId": 10011, "x": 25, "y": 30}
{"mapId": 10011, "x": 25, "y": 31}
{"mapId": 10011, "x": 26, "y": 30}


{"mapId": 10012, "x": 97, "y": 14}
{"mapId": 10012, "x": 97, "y": 15}
{"mapId": 10012, "x": 98, "y": 12}
{"mapId": 10012, "x": 98, "y": 13}
{"mapId": 10012, "x": 98, "y": 14}
{"mapId": 10012, "x": 98, "y": 15}
{"mapId": 10012, "x": 98, "y": 16}


{"mapId": 10040, "x": 16, "y": 40}
{"mapId": 10040, "x": 17, "y": 40}
{"mapId": 10040, "x": 17, "y": 41}
{"mapId": 10040, "x": 18, "y": 41}


{"mapId": 10100, "x": 11, "y": 12}
{"mapId": 10100, "x": 11, "y": 13}
{"mapId": 10100, "x": 11, "y": 14}
{"mapId": 10100, "x": 11, "y": 15}
{"mapId": 10100, "x": 11, "y": 16}
{"mapId": 10100, "x": 12, "y": 15}
{"mapId": 10100, "x": 61, "y": 80}
{"mapId": 10100, "x": 61, "y": 81}
{"mapId": 10100, "x": 61, "y": 82}
{"mapId": 10100, "x": 61, "y": 83}
{"mapId": 10100, "x": 61, "y": 84}
{"mapId": 10100, "x": 61, "y": 85}
{"mapId": 10100, "x": 61, "y": 86}
{"mapId": 10100, "x": 61, "y": 87}


{"mapId": 10101, "x": 10, "y": 15}
{"mapId": 10101, "x": 10, "y": 16}
{"mapId": 10101, "x": 10, "y": 17}
{"mapId": 10101, "x": 10, "y": 18}
{"mapId": 10101, "x": 11, "y": 12}
{"mapId": 10101, "x": 11, "y": 13}
{"mapId": 10101, "x": 11, "y": 14}
{"mapId": 10101, "x": 11, "y": 15}
{"mapId": 10101, "x": 12, "y": 12}
{"mapId": 10101, "x": 13, "y": 12}
{"mapId": 10101, "x": 71, "y": 12}
{"mapId": 10101, "x": 71, "y": 13}
{"mapId": 10101, "x": 71, "y": 14}
{"mapId": 10101, "x": 71, "y": 15}
{"mapId": 10101, "x": 71, "y": 16}
{"mapId": 10101, "x": 71, "y": 17}
{"mapId": 10101, "x": 71, "y": 18}
{"mapId": 10101, "x": 71, "y": 19}
{"mapId": 10101, "x": 71, "y": 20}
{"mapId": 10101, "x": 71, "y": 77}
{"mapId": 10101, "x": 71, "y": 78}
{"mapId": 10101, "x": 71, "y": 79}
{"mapId": 10101, "x": 71, "y": 80}
{"mapId": 10101, "x": 71, "y": 81}
{"mapId": 10101, "x": 71, "y": 82}
{"mapId": 10101, "x": 71, "y": 83}
{"mapId": 10101, "x": 71, "y": 84}
{"mapId": 10101, "x": 71, "y": 85}
{"mapId": 10101, "x": 71, "y": 86}
{"mapId": 10101, "x": 71, "y": 87}
{"mapId": 10101, "x": 71, "y": 88}
{"mapId": 10101, "x": 71, "y": 89}
{"mapId": 10101, "x": 71, "y": 90}
{"mapId": 10101, "x": 71, "y": 91}


{"mapId": 10102, "x": 8, "y": 12}
{"mapId": 10102, "x": 8, "y": 13}
{"mapId": 10102, "x": 8, "y": 14}
{"mapId": 10102, "x": 8, "y": 15}
{"mapId": 10102, "x": 8, "y": 16}
{"mapId": 10102, "x": 8, "y": 17}
{"mapId": 10102, "x": 8, "y": 18}
{"mapId": 10102, "x": 8, "y": 19}
{"mapId": 10102, "x": 8, "y": 20}
{"mapId": 10102, "x": 8, "y": 21}
{"mapId": 10102, "x": 8, "y": 79}
{"mapId": 10102, "x": 8, "y": 80}
{"mapId": 10102, "x": 8, "y": 81}
{"mapId": 10102, "x": 8, "y": 82}
{"mapId": 10102, "x": 8, "y": 83}
{"mapId": 10102, "x": 8, "y": 84}
{"mapId": 10102, "x": 8, "y": 85}
{"mapId": 10102, "x": 8, "y": 86}
{"mapId": 10102, "x": 8, "y": 87}
{"mapId": 10102, "x": 8, "y": 88}
{"mapId": 10102, "x": 26, "y": 62}
{"mapId": 10102, "x": 26, "y": 63}
{"mapId": 10102, "x": 26, "y": 64}
{"mapId": 10102, "x": 26, "y": 65}


{"mapId": 10200, "x": 13, "y": 20}
{"mapId": 10200, "x": 75, "y": 116}
{"mapId": 10200, "x": 75, "y": 117}


{"mapId": 10201, "x": 9, "y": 15}
{"mapId": 10201, "x": 9, "y": 16}
{"mapId": 10201, "x": 80, "y": 88}
{"mapId": 10201, "x": 80, "y": 89}
{"mapId": 10201, "x": 80, "y": 90}
{"mapId": 10201, "x": 80, "y": 91}
{"mapId": 10201, "x": 80, "y": 92}
{"mapId": 10201, "x": 81, "y": 85}
{"mapId": 10201, "x": 81, "y": 86}
{"mapId": 10201, "x": 81, "y": 87}
{"mapId": 10201, "x": 81, "y": 88}


{"mapId": 10202, "x": 9, "y": 19}
{"mapId": 10202, "x": 9, "y": 20}
{"mapId": 10202, "x": 10, "y": 15}
{"mapId": 10202, "x": 10, "y": 16}
{"mapId": 10202, "x": 10, "y": 17}
{"mapId": 10202, "x": 10, "y": 18}
{"mapId": 10202, "x": 10, "y": 19}
{"mapId": 10202, "x": 11, "y": 12}
{"mapId": 10202, "x": 11, "y": 13}
{"mapId": 10202, "x": 11, "y": 14}
{"mapId": 10202, "x": 11, "y": 15}
{"mapId": 10202, "x": 12, "y": 12}
{"mapId": 10202, "x": 59, "y": 105}
{"mapId": 10202, "x": 59, "y": 106}
{"mapId": 10202, "x": 59, "y": 107}
{"mapId": 10202, "x": 60, "y": 104}
{"mapId": 10202, "x": 60, "y": 105}
{"mapId": 10202, "x": 61, "y": 12}
{"mapId": 10202, "x": 61, "y": 13}
{"mapId": 10202, "x": 61, "y": 14}
{"mapId": 10202, "x": 61, "y": 15}
{"mapId": 10202, "x": 61, "y": 16}
{"mapId": 10202, "x": 61, "y": 17}
{"mapId": 10202, "x": 61, "y": 18}
{"mapId": 10202, "x": 61, "y": 19}
{"mapId": 10202, "x": 61, "y": 101}
{"mapId": 10202, "x": 61, "y": 102}
{"mapId": 10202, "x": 61, "y": 103}
{"mapId": 10202, "x": 61, "y": 104}


{"mapId": 10203, "x": 9, "y": 27}
{"mapId": 10203, "x": 10, "y": 26}
{"mapId": 10203, "x": 10, "y": 27}
{"mapId": 10203, "x": 15, "y": 18}
{"mapId": 10203, "x": 16, "y": 17}
{"mapId": 10203, "x": 16, "y": 18}


{"mapId": 10204, "x": 15, "y": 78}
{"mapId": 10204, "x": 15, "y": 79}
{"mapId": 10204, "x": 36, "y": 43}
{"mapId": 10204, "x": 36, "y": 44}
{"mapId": 10204, "x": 37, "y": 44}
{"mapId": 10204, "x": 57, "y": 112}
{"mapId": 10204, "x": 58, "y": 112}
{"mapId": 10204, "x": 59, "y": 111}
{"mapId": 10204, "x": 59, "y": 112}
{"mapId": 10204, "x": 60, "y": 109}
{"mapId": 10204, "x": 60, "y": 110}
{"mapId": 10204, "x": 60, "y": 111}
{"mapId": 10204, "x": 61, "y": 12}
{"mapId": 10204, "x": 61, "y": 13}
{"mapId": 10204, "x": 61, "y": 14}
{"mapId": 10204, "x": 62, "y": 14}
{"mapId": 10204, "x": 62, "y": 15}
{"mapId": 10204, "x": 62, "y": 16}
{"mapId": 10204, "x": 62, "y": 17}
{"mapId": 10204, "x": 62, "y": 108}
{"mapId": 10204, "x": 63, "y": 17}
{"mapId": 10204, "x": 63, "y": 18}
{"mapId": 10204, "x": 63, "y": 108}
{"mapId": 10204, "x": 64, "y": 18}
{"mapId": 10204, "x": 64, "y": 106}
{"mapId": 10204, "x": 64, "y": 107}
{"mapId": 10204, "x": 64, "y": 108}


{"mapId": 10205, "x": 8, "y": 17}
{"mapId": 10205, "x": 9, "y": 16}
{"mapId": 10205, "x": 9, "y": 17}
{"mapId": 10205, "x": 10, "y": 15}
{"mapId": 10205, "x": 10, "y": 16}
{"mapId": 10205, "x": 11, "y": 14}
{"mapId": 10205, "x": 11, "y": 15}
{"mapId": 10205, "x": 12, "y": 13}
{"mapId": 10205, "x": 12, "y": 14}
{"mapId": 10205, "x": 13, "y": 12}
{"mapId": 10205, "x": 13, "y": 13}
{"mapId": 10205, "x": 14, "y": 12}
{"mapId": 10205, "x": 15, "y": 12}
{"mapId": 10205, "x": 32, "y": 96}
{"mapId": 10205, "x": 33, "y": 96}
{"mapId": 10205, "x": 34, "y": 96}
{"mapId": 10205, "x": 35, "y": 96}
{"mapId": 10205, "x": 36, "y": 96}
{"mapId": 10205, "x": 37, "y": 96}
{"mapId": 10205, "x": 38, "y": 96}


{"mapId": 10206, "x": 10, "y": 15}
{"mapId": 10206, "x": 10, "y": 16}
{"mapId": 10206, "x": 11, "y": 13}
{"mapId": 10206, "x": 11, "y": 14}
{"mapId": 10206, "x": 11, "y": 15}
{"mapId": 10206, "x": 12, "y": 12}
{"mapId": 10206, "x": 12, "y": 13}
{"mapId": 10206, "x": 13, "y": 12}
{"mapId": 10206, "x": 14, "y": 12}
{"mapId": 10206, "x": 68, "y": 12}
{"mapId": 10206, "x": 69, "y": 12}
{"mapId": 10206, "x": 70, "y": 12}
{"mapId": 10206, "x": 70, "y": 13}
{"mapId": 10206, "x": 71, "y": 13}
{"mapId": 10206, "x": 71, "y": 14}
{"mapId": 10206, "x": 71, "y": 15}
{"mapId": 10206, "x": 71, "y": 16}


{"mapId": 10207, "x": 8, "y": 13}
{"mapId": 10207, "x": 8, "y": 14}
{"mapId": 10207, "x": 8, "y": 15}
{"mapId": 10207, "x": 9, "y": 12}
{"mapId": 10207, "x": 9, "y": 13}
{"mapId": 10207, "x": 10, "y": 12}
{"mapId": 10207, "x": 11, "y": 12}
{"mapId": 10207, "x": 71, "y": 127}
{"mapId": 10207, "x": 72, "y": 127}
{"mapId": 10207, "x": 73, "y": 127}
{"mapId": 10207, "x": 74, "y": 12}
{"mapId": 10207, "x": 74, "y": 127}
{"mapId": 10207, "x": 75, "y": 12}
{"mapId": 10207, "x": 75, "y": 13}
{"mapId": 10207, "x": 75, "y": 14}
{"mapId": 10207, "x": 75, "y": 15}
{"mapId": 10207, "x": 75, "y": 127}
{"mapId": 10207, "x": 76, "y": 15}
{"mapId": 10207, "x": 76, "y": 16}
{"mapId": 10207, "x": 76, "y": 17}
{"mapId": 10207, "x": 76, "y": 126}
{"mapId": 10207, "x": 76, "y": 127}


{"mapId": 10208, "x": 11, "y": 13}
{"mapId": 10208, "x": 11, "y": 14}
{"mapId": 10208, "x": 12, "y": 12}
{"mapId": 10208, "x": 12, "y": 13}
{"mapId": 10208, "x": 27, "y": 13}
{"mapId": 10208, "x": 28, "y": 13}
{"mapId": 10208, "x": 28, "y": 14}


{"mapId": 10209, "x": 8, "y": 12}
{"mapId": 10209, "x": 8, "y": 13}
{"mapId": 10209, "x": 8, "y": 14}
{"mapId": 10209, "x": 8, "y": 15}
{"mapId": 10209, "x": 8, "y": 16}
{"mapId": 10209, "x": 8, "y": 119}
{"mapId": 10209, "x": 8, "y": 120}
{"mapId": 10209, "x": 8, "y": 121}
{"mapId": 10209, "x": 9, "y": 12}
{"mapId": 10209, "x": 10, "y": 12}
{"mapId": 10209, "x": 11, "y": 12}
{"mapId": 10209, "x": 12, "y": 122}
{"mapId": 10209, "x": 13, "y": 122}
{"mapId": 10209, "x": 33, "y": 39}
{"mapId": 10209, "x": 33, "y": 40}
{"mapId": 10209, "x": 34, "y": 40}
{"mapId": 10209, "x": 45, "y": 82}
{"mapId": 10209, "x": 45, "y": 83}
{"mapId": 10209, "x": 46, "y": 83}
{"mapId": 10209, "x": 71, "y": 66}
{"mapId": 10209, "x": 71, "y": 67}
{"mapId": 10209, "x": 71, "y": 68}
{"mapId": 10209, "x": 71, "y": 69}
{"mapId": 10209, "x": 71, "y": 70}


{"mapId": 10210, "x": 8, "y": 84}
{"mapId": 10210, "x": 9, "y": 84}
{"mapId": 10210, "x": 9, "y": 85}
{"mapId": 10210, "x": 10, "y": 85}
{"mapId": 10210, "x": 10, "y": 86}
{"mapId": 10210, "x": 11, "y": 86}
{"mapId": 10210, "x": 65, "y": 18}
{"mapId": 10210, "x": 66, "y": 18}
{"mapId": 10210, "x": 67, "y": 18}
{"mapId": 10210, "x": 67, "y": 19}
{"mapId": 10210, "x": 68, "y": 19}
{"mapId": 10210, "x": 68, "y": 20}
{"mapId": 10210, "x": 68, "y": 21}
{"mapId": 10210, "x": 68, "y": 22}


{"mapId": 10211, "x": 8, "y": 68}
{"mapId": 10211, "x": 9, "y": 68}
{"mapId": 10211, "x": 9, "y": 69}
{"mapId": 10211, "x": 10, "y": 69}
{"mapId": 10211, "x": 11, "y": 69}
{"mapId": 10211, "x": 11, "y": 70}
{"mapId": 10211, "x": 12, "y": 70}
{"mapId": 10211, "x": 13, "y": 70}
{"mapId": 10211, "x": 14, "y": 70}
{"mapId": 10211, "x": 15, "y": 70}


{"mapId": 10213, "x": 49, "y": 49}
{"mapId": 10213, "x": 49, "y": 50}
{"mapId": 10213, "x": 66, "y": 12}
{"mapId": 10213, "x": 67, "y": 12}
{"mapId": 10213, "x": 67, "y": 13}
{"mapId": 10213, "x": 71, "y": 14}
{"mapId": 10213, "x": 71, "y": 15}


{"mapId": 10214, "x": 37, "y": 19}
{"mapId": 10214, "x": 37, "y": 20}
{"mapId": 10214, "x": 57, "y": 76}
{"mapId": 10214, "x": 57, "y": 77}


{"mapId": 10215, "x": 8, "y": 15}
{"mapId": 10215, "x": 8, "y": 16}
{"mapId": 10215, "x": 9, "y": 15}
{"mapId": 10215, "x": 61, "y": 95}
{"mapId": 10215, "x": 61, "y": 96}


{"mapId": 10216, "x": 26, "y": 13}
{"mapId": 10216, "x": 27, "y": 12}
{"mapId": 10216, "x": 27, "y": 13}


{"mapId": 10230, "x": 16, "y": 24}
{"mapId": 10230, "x": 16, "y": 25}
{"mapId": 10230, "x": 18, "y": 78}
{"mapId": 10230, "x": 18, "y": 79}
{"mapId": 10230, "x": 61, "y": 19}
{"mapId": 10230, "x": 61, "y": 20}
{"mapId": 10230, "x": 70, "y": 85}
{"mapId": 10230, "x": 70, "y": 86}


{"mapId": 10231, "x": 69, "y": 94}
{"mapId": 10231, "x": 69, "y": 95}
{"mapId": 10231, "x": 74, "y": 111}
{"mapId": 10231, "x": 74, "y": 112}
{"mapId": 10231, "x": 75, "y": 110}
{"mapId": 10231, "x": 75, "y": 111}
{"mapId": 10231, "x": 76, "y": 109}
{"mapId": 10231, "x": 76, "y": 110}
{"mapId": 10231, "x": 77, "y": 108}
{"mapId": 10231, "x": 77, "y": 109}
{"mapId": 10231, "x": 78, "y": 56}
{"mapId": 10231, "x": 78, "y": 108}
{"mapId": 10231, "x": 81, "y": 12}
{"mapId": 10231, "x": 81, "y": 13}
{"mapId": 10231, "x": 82, "y": 13}
{"mapId": 10231, "x": 82, "y": 14}
{"mapId": 10231, "x": 83, "y": 14}
{"mapId": 10231, "x": 83, "y": 15}


{"mapId": 10232, "x": 9, "y": 125}
{"mapId": 10232, "x": 10, "y": 125}
{"mapId": 10232, "x": 10, "y": 126}
{"mapId": 10232, "x": 11, "y": 126}
{"mapId": 10232, "x": 11, "y": 127}
{"mapId": 10232, "x": 12, "y": 127}
{"mapId": 10232, "x": 44, "y": 119}
{"mapId": 10232, "x": 44, "y": 120}
{"mapId": 10232, "x": 79, "y": 16}
{"mapId": 10232, "x": 107, "y": 125}
{"mapId": 10232, "x": 107, "y": 126}
{"mapId": 10232, "x": 108, "y": 124}
{"mapId": 10232, "x": 108, "y": 125}
{"mapId": 10232, "x": 109, "y": 123}
{"mapId": 10232, "x": 109, "y": 124}


{"mapId": 10233, "x": 8, "y": 19}
{"mapId": 10233, "x": 8, "y": 20}
{"mapId": 10233, "x": 9, "y": 18}
{"mapId": 10233, "x": 9, "y": 19}
{"mapId": 10233, "x": 10, "y": 17}
{"mapId": 10233, "x": 10, "y": 18}
{"mapId": 10233, "x": 11, "y": 16}
{"mapId": 10233, "x": 11, "y": 17}
{"mapId": 10233, "x": 12, "y": 15}
{"mapId": 10233, "x": 12, "y": 16}
{"mapId": 10233, "x": 13, "y": 14}
{"mapId": 10233, "x": 13, "y": 15}
{"mapId": 10233, "x": 14, "y": 14}
{"mapId": 10233, "x": 38, "y": 11}
{"mapId": 10233, "x": 48, "y": 109}
{"mapId": 10233, "x": 48, "y": 110}
{"mapId": 10233, "x": 49, "y": 110}
{"mapId": 10233, "x": 49, "y": 111}
{"mapId": 10233, "x": 50, "y": 111}
{"mapId": 10233, "x": 50, "y": 112}
{"mapId": 10233, "x": 51, "y": 112}
{"mapId": 10233, "x": 51, "y": 113}
{"mapId": 10233, "x": 52, "y": 113}
{"mapId": 10233, "x": 82, "y": 76}
{"mapId": 10233, "x": 82, "y": 77}


{"mapId": 10234, "x": 8, "y": 74}
{"mapId": 10234, "x": 9, "y": 73}
{"mapId": 10234, "x": 9, "y": 74}
{"mapId": 10234, "x": 10, "y": 72}
{"mapId": 10234, "x": 10, "y": 73}
{"mapId": 10234, "x": 11, "y": 71}
{"mapId": 10234, "x": 11, "y": 72}
{"mapId": 10234, "x": 61, "y": 16}
{"mapId": 10234, "x": 65, "y": 120}
{"mapId": 10234, "x": 65, "y": 121}
{"mapId": 10234, "x": 104, "y": 15}
{"mapId": 10234, "x": 104, "y": 16}
{"mapId": 10234, "x": 105, "y": 16}
{"mapId": 10234, "x": 105, "y": 17}
{"mapId": 10234, "x": 106, "y": 17}
{"mapId": 10234, "x": 106, "y": 18}
{"mapId": 10234, "x": 107, "y": 18}
{"mapId": 10234, "x": 107, "y": 19}
{"mapId": 10234, "x": 108, "y": 19}
{"mapId": 10234, "x": 108, "y": 20}


{"mapId": 10235, "x": 17, "y": 38}
{"mapId": 10235, "x": 32, "y": 21}
{"mapId": 10235, "x": 39, "y": 115}
{"mapId": 10235, "x": 39, "y": 116}
{"mapId": 10235, "x": 46, "y": 19}
{"mapId": 10235, "x": 62, "y": 38}


{"mapId": 10240, "x": 16, "y": 24}
{"mapId": 10240, "x": 16, "y": 25}
{"mapId": 10240, "x": 18, "y": 78}
{"mapId": 10240, "x": 18, "y": 79}
{"mapId": 10240, "x": 61, "y": 19}
{"mapId": 10240, "x": 61, "y": 20}
{"mapId": 10240, "x": 70, "y": 85}
{"mapId": 10240, "x": 70, "y": 86}


{"mapId": 10241, "x": 69, "y": 94}
{"mapId": 10241, "x": 69, "y": 95}
{"mapId": 10241, "x": 74, "y": 111}
{"mapId": 10241, "x": 74, "y": 112}
{"mapId": 10241, "x": 75, "y": 110}
{"mapId": 10241, "x": 75, "y": 111}
{"mapId": 10241, "x": 76, "y": 109}
{"mapId": 10241, "x": 76, "y": 110}
{"mapId": 10241, "x": 77, "y": 108}
{"mapId": 10241, "x": 77, "y": 109}
{"mapId": 10241, "x": 78, "y": 56}
{"mapId": 10241, "x": 78, "y": 108}
{"mapId": 10241, "x": 81, "y": 12}
{"mapId": 10241, "x": 81, "y": 13}
{"mapId": 10241, "x": 82, "y": 13}
{"mapId": 10241, "x": 82, "y": 14}
{"mapId": 10241, "x": 83, "y": 14}
{"mapId": 10241, "x": 83, "y": 15}


{"mapId": 10242, "x": 9, "y": 125}
{"mapId": 10242, "x": 10, "y": 125}
{"mapId": 10242, "x": 10, "y": 126}
{"mapId": 10242, "x": 11, "y": 126}
{"mapId": 10242, "x": 11, "y": 127}
{"mapId": 10242, "x": 12, "y": 127}
{"mapId": 10242, "x": 44, "y": 119}
{"mapId": 10242, "x": 44, "y": 120}
{"mapId": 10242, "x": 79, "y": 16}
{"mapId": 10242, "x": 107, "y": 125}
{"mapId": 10242, "x": 107, "y": 126}
{"mapId": 10242, "x": 108, "y": 124}
{"mapId": 10242, "x": 108, "y": 125}
{"mapId": 10242, "x": 109, "y": 123}
{"mapId": 10242, "x": 109, "y": 124}


{"mapId": 10243, "x": 8, "y": 19}
{"mapId": 10243, "x": 8, "y": 20}
{"mapId": 10243, "x": 9, "y": 18}
{"mapId": 10243, "x": 9, "y": 19}
{"mapId": 10243, "x": 10, "y": 17}
{"mapId": 10243, "x": 10, "y": 18}
{"mapId": 10243, "x": 11, "y": 16}
{"mapId": 10243, "x": 11, "y": 17}
{"mapId": 10243, "x": 12, "y": 15}
{"mapId": 10243, "x": 12, "y": 16}
{"mapId": 10243, "x": 13, "y": 14}
{"mapId": 10243, "x": 13, "y": 15}
{"mapId": 10243, "x": 14, "y": 14}
{"mapId": 10243, "x": 38, "y": 11}
{"mapId": 10243, "x": 48, "y": 109}
{"mapId": 10243, "x": 48, "y": 110}
{"mapId": 10243, "x": 49, "y": 110}
{"mapId": 10243, "x": 49, "y": 111}
{"mapId": 10243, "x": 50, "y": 111}
{"mapId": 10243, "x": 50, "y": 112}
{"mapId": 10243, "x": 51, "y": 112}
{"mapId": 10243, "x": 51, "y": 113}
{"mapId": 10243, "x": 52, "y": 113}
{"mapId": 10243, "x": 82, "y": 76}
{"mapId": 10243, "x": 82, "y": 77}


{"mapId": 10244, "x": 8, "y": 74}
{"mapId": 10244, "x": 9, "y": 73}
{"mapId": 10244, "x": 9, "y": 74}
{"mapId": 10244, "x": 10, "y": 72}
{"mapId": 10244, "x": 10, "y": 73}
{"mapId": 10244, "x": 11, "y": 71}
{"mapId": 10244, "x": 11, "y": 72}
{"mapId": 10244, "x": 61, "y": 16}
{"mapId": 10244, "x": 65, "y": 120}
{"mapId": 10244, "x": 65, "y": 121}
{"mapId": 10244, "x": 104, "y": 15}
{"mapId": 10244, "x": 104, "y": 16}
{"mapId": 10244, "x": 105, "y": 16}
{"mapId": 10244, "x": 105, "y": 17}
{"mapId": 10244, "x": 106, "y": 17}
{"mapId": 10244, "x": 106, "y": 18}
{"mapId": 10244, "x": 107, "y": 18}
{"mapId": 10244, "x": 107, "y": 19}
{"mapId": 10244, "x": 108, "y": 19}
{"mapId": 10244, "x": 108, "y": 20}


{"mapId": 10245, "x": 17, "y": 38}
{"mapId": 10245, "x": 32, "y": 21}
{"mapId": 10245, "x": 39, "y": 115}
{"mapId": 10245, "x": 39, "y": 116}
{"mapId": 10245, "x": 46, "y": 19}
{"mapId": 10245, "x": 62, "y": 38}


{"mapId": 10250, "x": 16, "y": 24}
{"mapId": 10250, "x": 16, "y": 25}
{"mapId": 10250, "x": 18, "y": 78}
{"mapId": 10250, "x": 18, "y": 79}
{"mapId": 10250, "x": 61, "y": 19}
{"mapId": 10250, "x": 61, "y": 20}
{"mapId": 10250, "x": 70, "y": 85}
{"mapId": 10250, "x": 70, "y": 86}


{"mapId": 10251, "x": 69, "y": 94}
{"mapId": 10251, "x": 69, "y": 95}
{"mapId": 10251, "x": 74, "y": 111}
{"mapId": 10251, "x": 74, "y": 112}
{"mapId": 10251, "x": 75, "y": 110}
{"mapId": 10251, "x": 75, "y": 111}
{"mapId": 10251, "x": 76, "y": 109}
{"mapId": 10251, "x": 76, "y": 110}
{"mapId": 10251, "x": 77, "y": 108}
{"mapId": 10251, "x": 77, "y": 109}
{"mapId": 10251, "x": 78, "y": 56}
{"mapId": 10251, "x": 78, "y": 108}
{"mapId": 10251, "x": 81, "y": 12}
{"mapId": 10251, "x": 81, "y": 13}
{"mapId": 10251, "x": 82, "y": 13}
{"mapId": 10251, "x": 82, "y": 14}
{"mapId": 10251, "x": 83, "y": 14}
{"mapId": 10251, "x": 83, "y": 15}


{"mapId": 10252, "x": 9, "y": 125}
{"mapId": 10252, "x": 10, "y": 125}
{"mapId": 10252, "x": 10, "y": 126}
{"mapId": 10252, "x": 11, "y": 126}
{"mapId": 10252, "x": 11, "y": 127}
{"mapId": 10252, "x": 12, "y": 127}
{"mapId": 10252, "x": 44, "y": 119}
{"mapId": 10252, "x": 44, "y": 120}
{"mapId": 10252, "x": 79, "y": 16}
{"mapId": 10252, "x": 107, "y": 125}
{"mapId": 10252, "x": 107, "y": 126}
{"mapId": 10252, "x": 108, "y": 124}
{"mapId": 10252, "x": 108, "y": 125}
{"mapId": 10252, "x": 109, "y": 123}
{"mapId": 10252, "x": 109, "y": 124}


{"mapId": 10253, "x": 8, "y": 19}
{"mapId": 10253, "x": 8, "y": 20}
{"mapId": 10253, "x": 9, "y": 18}
{"mapId": 10253, "x": 9, "y": 19}
{"mapId": 10253, "x": 10, "y": 17}
{"mapId": 10253, "x": 10, "y": 18}
{"mapId": 10253, "x": 11, "y": 16}
{"mapId": 10253, "x": 11, "y": 17}
{"mapId": 10253, "x": 12, "y": 15}
{"mapId": 10253, "x": 12, "y": 16}
{"mapId": 10253, "x": 13, "y": 14}
{"mapId": 10253, "x": 13, "y": 15}
{"mapId": 10253, "x": 14, "y": 14}
{"mapId": 10253, "x": 38, "y": 11}
{"mapId": 10253, "x": 48, "y": 109}
{"mapId": 10253, "x": 48, "y": 110}
{"mapId": 10253, "x": 49, "y": 110}
{"mapId": 10253, "x": 49, "y": 111}
{"mapId": 10253, "x": 50, "y": 111}
{"mapId": 10253, "x": 50, "y": 112}
{"mapId": 10253, "x": 51, "y": 112}
{"mapId": 10253, "x": 51, "y": 113}
{"mapId": 10253, "x": 52, "y": 113}
{"mapId": 10253, "x": 82, "y": 76}
{"mapId": 10253, "x": 82, "y": 77}


{"mapId": 10254, "x": 8, "y": 74}
{"mapId": 10254, "x": 9, "y": 73}
{"mapId": 10254, "x": 9, "y": 74}
{"mapId": 10254, "x": 10, "y": 72}
{"mapId": 10254, "x": 10, "y": 73}
{"mapId": 10254, "x": 11, "y": 71}
{"mapId": 10254, "x": 11, "y": 72}
{"mapId": 10254, "x": 61, "y": 16}
{"mapId": 10254, "x": 65, "y": 120}
{"mapId": 10254, "x": 65, "y": 121}
{"mapId": 10254, "x": 104, "y": 15}
{"mapId": 10254, "x": 104, "y": 16}
{"mapId": 10254, "x": 105, "y": 16}
{"mapId": 10254, "x": 105, "y": 17}
{"mapId": 10254, "x": 106, "y": 17}
{"mapId": 10254, "x": 106, "y": 18}
{"mapId": 10254, "x": 107, "y": 18}
{"mapId": 10254, "x": 107, "y": 19}
{"mapId": 10254, "x": 108, "y": 19}


{"mapId": 10255, "x": 17, "y": 38}
{"mapId": 10255, "x": 32, "y": 21}
{"mapId": 10255, "x": 39, "y": 115}
{"mapId": 10255, "x": 39, "y": 116}
{"mapId": 10255, "x": 46, "y": 19}
{"mapId": 10255, "x": 62, "y": 38}


{"mapId": 10260, "x": 16, "y": 24}
{"mapId": 10260, "x": 16, "y": 25}
{"mapId": 10260, "x": 18, "y": 78}
{"mapId": 10260, "x": 18, "y": 79}
{"mapId": 10260, "x": 61, "y": 19}
{"mapId": 10260, "x": 61, "y": 20}
{"mapId": 10260, "x": 70, "y": 85}
{"mapId": 10260, "x": 70, "y": 86}


{"mapId": 10261, "x": 69, "y": 94}
{"mapId": 10261, "x": 69, "y": 95}
{"mapId": 10261, "x": 74, "y": 111}
{"mapId": 10261, "x": 74, "y": 112}
{"mapId": 10261, "x": 75, "y": 110}
{"mapId": 10261, "x": 75, "y": 111}
{"mapId": 10261, "x": 76, "y": 109}
{"mapId": 10261, "x": 76, "y": 110}
{"mapId": 10261, "x": 77, "y": 108}
{"mapId": 10261, "x": 77, "y": 109}
{"mapId": 10261, "x": 78, "y": 56}
{"mapId": 10261, "x": 78, "y": 108}
{"mapId": 10261, "x": 81, "y": 12}
{"mapId": 10261, "x": 81, "y": 13}
{"mapId": 10261, "x": 82, "y": 13}
{"mapId": 10261, "x": 82, "y": 14}
{"mapId": 10261, "x": 83, "y": 14}
{"mapId": 10261, "x": 83, "y": 15}


{"mapId": 10262, "x": 9, "y": 125}
{"mapId": 10262, "x": 10, "y": 125}
{"mapId": 10262, "x": 10, "y": 126}
{"mapId": 10262, "x": 11, "y": 126}
{"mapId": 10262, "x": 11, "y": 127}
{"mapId": 10262, "x": 12, "y": 127}
{"mapId": 10262, "x": 44, "y": 119}
{"mapId": 10262, "x": 44, "y": 120}
{"mapId": 10262, "x": 79, "y": 16}
{"mapId": 10262, "x": 107, "y": 125}
{"mapId": 10262, "x": 107, "y": 126}
{"mapId": 10262, "x": 108, "y": 124}
{"mapId": 10262, "x": 108, "y": 125}
{"mapId": 10262, "x": 109, "y": 123}
{"mapId": 10262, "x": 109, "y": 124}


{"mapId": 10263, "x": 8, "y": 19}
{"mapId": 10263, "x": 8, "y": 20}
{"mapId": 10263, "x": 9, "y": 18}
{"mapId": 10263, "x": 9, "y": 19}
{"mapId": 10263, "x": 10, "y": 17}
{"mapId": 10263, "x": 10, "y": 18}
{"mapId": 10263, "x": 11, "y": 16}
{"mapId": 10263, "x": 11, "y": 17}
{"mapId": 10263, "x": 12, "y": 15}
{"mapId": 10263, "x": 12, "y": 16}
{"mapId": 10263, "x": 13, "y": 14}
{"mapId": 10263, "x": 13, "y": 15}
{"mapId": 10263, "x": 14, "y": 14}
{"mapId": 10263, "x": 38, "y": 11}
{"mapId": 10263, "x": 48, "y": 109}
{"mapId": 10263, "x": 48, "y": 110}
{"mapId": 10263, "x": 49, "y": 110}
{"mapId": 10263, "x": 49, "y": 111}
{"mapId": 10263, "x": 50, "y": 111}
{"mapId": 10263, "x": 50, "y": 112}
{"mapId": 10263, "x": 51, "y": 112}
{"mapId": 10263, "x": 51, "y": 113}
{"mapId": 10263, "x": 52, "y": 113}
{"mapId": 10263, "x": 82, "y": 76}
{"mapId": 10263, "x": 82, "y": 77}


{"mapId": 10264, "x": 8, "y": 74}
{"mapId": 10264, "x": 9, "y": 73}
{"mapId": 10264, "x": 9, "y": 74}
{"mapId": 10264, "x": 10, "y": 72}
{"mapId": 10264, "x": 10, "y": 73}
{"mapId": 10264, "x": 11, "y": 71}
{"mapId": 10264, "x": 11, "y": 72}
{"mapId": 10264, "x": 61, "y": 16}
{"mapId": 10264, "x": 65, "y": 120}
{"mapId": 10264, "x": 65, "y": 121}
{"mapId": 10264, "x": 104, "y": 15}
{"mapId": 10264, "x": 104, "y": 16}
{"mapId": 10264, "x": 105, "y": 16}
{"mapId": 10264, "x": 105, "y": 17}
{"mapId": 10264, "x": 106, "y": 17}
{"mapId": 10264, "x": 106, "y": 18}
{"mapId": 10264, "x": 107, "y": 18}
{"mapId": 10264, "x": 107, "y": 19}
{"mapId": 10264, "x": 108, "y": 19}
{"mapId": 10264, "x": 108, "y": 20}


{"mapId": 10265, "x": 17, "y": 38}
{"mapId": 10265, "x": 32, "y": 21}
{"mapId": 10265, "x": 39, "y": 115}
{"mapId": 10265, "x": 39, "y": 116}
{"mapId": 10265, "x": 46, "y": 19}
{"mapId": 10265, "x": 62, "y": 38}


{"mapId": 10300, "x": 8, "y": 12}
{"mapId": 10300, "x": 8, "y": 13}
{"mapId": 10300, "x": 8, "y": 14}
{"mapId": 10300, "x": 8, "y": 15}
{"mapId": 10300, "x": 8, "y": 16}
{"mapId": 10300, "x": 8, "y": 17}
{"mapId": 10300, "x": 8, "y": 18}
{"mapId": 10300, "x": 8, "y": 19}
{"mapId": 10300, "x": 8, "y": 76}
{"mapId": 10300, "x": 8, "y": 77}
{"mapId": 10300, "x": 8, "y": 78}
{"mapId": 10300, "x": 8, "y": 79}
{"mapId": 10300, "x": 8, "y": 80}
{"mapId": 10300, "x": 8, "y": 81}
{"mapId": 10300, "x": 8, "y": 82}
{"mapId": 10300, "x": 8, "y": 83}
{"mapId": 10300, "x": 8, "y": 84}
{"mapId": 10300, "x": 8, "y": 85}
{"mapId": 10300, "x": 9, "y": 12}
{"mapId": 10300, "x": 76, "y": 13}
{"mapId": 10300, "x": 76, "y": 14}
{"mapId": 10300, "x": 77, "y": 14}
{"mapId": 10300, "x": 77, "y": 15}
{"mapId": 10300, "x": 78, "y": 15}
{"mapId": 10300, "x": 78, "y": 16}
{"mapId": 10300, "x": 78, "y": 104}
{"mapId": 10300, "x": 79, "y": 16}
{"mapId": 10300, "x": 79, "y": 17}
{"mapId": 10300, "x": 79, "y": 103}
{"mapId": 10300, "x": 79, "y": 104}
{"mapId": 10300, "x": 79, "y": 105}
{"mapId": 10300, "x": 80, "y": 17}
{"mapId": 10300, "x": 80, "y": 18}
{"mapId": 10300, "x": 81, "y": 18}
{"mapId": 10300, "x": 81, "y": 19}


{"mapId": 10301, "x": 28, "y": 28}
{"mapId": 10301, "x": 28, "y": 29}
{"mapId": 10301, "x": 28, "y": 30}
{"mapId": 10301, "x": 71, "y": 12}
{"mapId": 10301, "x": 72, "y": 12}
{"mapId": 10301, "x": 73, "y": 12}
{"mapId": 10301, "x": 74, "y": 12}
{"mapId": 10301, "x": 74, "y": 13}
{"mapId": 10301, "x": 75, "y": 13}
{"mapId": 10301, "x": 75, "y": 14}
{"mapId": 10301, "x": 76, "y": 14}
{"mapId": 10301, "x": 76, "y": 15}
{"mapId": 10301, "x": 76, "y": 88}
{"mapId": 10301, "x": 76, "y": 89}
{"mapId": 10301, "x": 77, "y": 15}
{"mapId": 10301, "x": 77, "y": 16}
{"mapId": 10301, "x": 77, "y": 87}
{"mapId": 10301, "x": 77, "y": 88}
{"mapId": 10301, "x": 78, "y": 16}
{"mapId": 10301, "x": 78, "y": 76}
{"mapId": 10301, "x": 78, "y": 77}
{"mapId": 10301, "x": 78, "y": 78}
{"mapId": 10301, "x": 78, "y": 79}
{"mapId": 10301, "x": 78, "y": 80}
{"mapId": 10301, "x": 78, "y": 81}
{"mapId": 10301, "x": 78, "y": 82}
{"mapId": 10301, "x": 78, "y": 83}
{"mapId": 10301, "x": 78, "y": 84}
{"mapId": 10301, "x": 78, "y": 85}
{"mapId": 10301, "x": 78, "y": 86}
{"mapId": 10301, "x": 78, "y": 87}


{"mapId": 10302, "x": 10, "y": 75}
{"mapId": 10302, "x": 11, "y": 75}
{"mapId": 10302, "x": 12, "y": 75}
{"mapId": 10302, "x": 13, "y": 75}
{"mapId": 10302, "x": 14, "y": 75}
{"mapId": 10302, "x": 15, "y": 75}
{"mapId": 10302, "x": 16, "y": 75}
{"mapId": 10302, "x": 17, "y": 75}
{"mapId": 10302, "x": 18, "y": 75}
{"mapId": 10302, "x": 58, "y": 59}
{"mapId": 10302, "x": 58, "y": 60}
{"mapId": 10302, "x": 58, "y": 61}
{"mapId": 10302, "x": 58, "y": 62}


{"mapId": 10303, "x": 8, "y": 20}
{"mapId": 10303, "x": 8, "y": 21}
{"mapId": 10303, "x": 8, "y": 22}
{"mapId": 10303, "x": 8, "y": 23}
{"mapId": 10303, "x": 8, "y": 24}
{"mapId": 10303, "x": 8, "y": 25}
{"mapId": 10303, "x": 8, "y": 26}
{"mapId": 10303, "x": 8, "y": 27}
{"mapId": 10303, "x": 8, "y": 28}
{"mapId": 10303, "x": 8, "y": 29}
{"mapId": 10303, "x": 8, "y": 30}
{"mapId": 10303, "x": 8, "y": 31}
{"mapId": 10303, "x": 8, "y": 32}
{"mapId": 10303, "x": 8, "y": 33}
{"mapId": 10303, "x": 8, "y": 34}


{"mapId": 10304, "x": 8, "y": 41}
{"mapId": 10304, "x": 8, "y": 42}
{"mapId": 10304, "x": 8, "y": 43}
{"mapId": 10304, "x": 8, "y": 44}
{"mapId": 10304, "x": 8, "y": 45}
{"mapId": 10304, "x": 8, "y": 46}
{"mapId": 10304, "x": 8, "y": 47}
{"mapId": 10304, "x": 8, "y": 48}
{"mapId": 10304, "x": 8, "y": 49}
{"mapId": 10304, "x": 8, "y": 50}
{"mapId": 10304, "x": 8, "y": 51}
{"mapId": 10304, "x": 19, "y": 12}
{"mapId": 10304, "x": 20, "y": 12}
{"mapId": 10304, "x": 21, "y": 12}
{"mapId": 10304, "x": 22, "y": 12}
{"mapId": 10304, "x": 23, "y": 12}
{"mapId": 10304, "x": 24, "y": 12}
{"mapId": 10304, "x": 58, "y": 30}
{"mapId": 10304, "x": 58, "y": 31}
{"mapId": 10304, "x": 78, "y": 52}
{"mapId": 10304, "x": 78, "y": 53}
{"mapId": 10304, "x": 78, "y": 54}
{"mapId": 10304, "x": 78, "y": 55}
{"mapId": 10304, "x": 78, "y": 56}
{"mapId": 10304, "x": 78, "y": 57}
{"mapId": 10304, "x": 78, "y": 58}
{"mapId": 10304, "x": 78, "y": 59}
{"mapId": 10304, "x": 78, "y": 60}
{"mapId": 10304, "x": 78, "y": 61}
{"mapId": 10304, "x": 78, "y": 62}
{"mapId": 10304, "x": 78, "y": 63}


{"mapId": 10306, "x": 8, "y": 41}
{"mapId": 10306, "x": 8, "y": 42}
{"mapId": 10306, "x": 8, "y": 43}
{"mapId": 10306, "x": 8, "y": 44}
{"mapId": 10306, "x": 8, "y": 45}
{"mapId": 10306, "x": 8, "y": 46}
{"mapId": 10306, "x": 8, "y": 47}
{"mapId": 10306, "x": 8, "y": 48}
{"mapId": 10306, "x": 8, "y": 49}
{"mapId": 10306, "x": 8, "y": 50}
{"mapId": 10306, "x": 8, "y": 51}


{"mapId": 10308, "x": 25, "y": 12}
{"mapId": 10308, "x": 26, "y": 12}
{"mapId": 10308, "x": 26, "y": 13}


{"mapId": 10400, "x": 13, "y": 18}
{"mapId": 10400, "x": 95, "y": 101}


{"mapId": 10401, "x": 24, "y": 144}
{"mapId": 10401, "x": 47, "y": 16}
{"mapId": 10401, "x": 85, "y": 157}


{"mapId": 10402, "x": 35, "y": 100}
{"mapId": 10402, "x": 84, "y": 47}
{"mapId": 10402, "x": 86, "y": 78}


{"mapId": 10403, "x": 12, "y": 108}
{"mapId": 10403, "x": 20, "y": 41}
{"mapId": 10403, "x": 52, "y": 107}


{"mapId": 10404, "x": 36, "y": 15}
{"mapId": 10404, "x": 57, "y": 84}


{"mapId": 10405, "x": 18, "y": 15}
{"mapId": 10405, "x": 28, "y": 173}
{"mapId": 10405, "x": 82, "y": 18}
{"mapId": 10405, "x": 87, "y": 173}


{"mapId": 10406, "x": 56, "y": 14}
{"mapId": 10406, "x": 65, "y": 103}


{"mapId": 10407, "x": 15, "y": 14}
{"mapId": 10407, "x": 67, "y": 72}
{"mapId": 10407, "x": 92, "y": 20}


{"mapId": 10408, "x": 18, "y": 18}
{"mapId": 10408, "x": 54, "y": 68}
{"mapId": 10408, "x": 69, "y": 20}


{"mapId": 10409, "x": 12, "y": 14}
{"mapId": 10409, "x": 48, "y": 141}
{"mapId": 10409, "x": 77, "y": 17}


{"mapId": 10410, "x": 49, "y": 13}
{"mapId": 10410, "x": 66, "y": 85}


{"mapId": 10411, "x": 11, "y": 28}


{"mapId": 10500, "x": 11, "y": 92}
{"mapId": 10500, "x": 50, "y": 100}


{"mapId": 10501, "x": 14, "y": 16}
{"mapId": 10501, "x": 50, "y": 28}
{"mapId": 10501, "x": 82, "y": 62}


{"mapId": 10502, "x": 44, "y": 68}
{"mapId": 10502, "x": 55, "y": 15}


{"mapId": 10503, "x": 69, "y": 26}
{"mapId": 10503, "x": 76, "y": 64}


{"mapId": 10504, "x": 16, "y": 17}
{"mapId": 10504, "x": 69, "y": 89}
{"mapId": 10504, "x": 71, "y": 15}


{"mapId": 10505, "x": 26, "y": 15}


{"mapId": 10600, "x": 16, "y": 19}
{"mapId": 10600, "x": 16, "y": 75}


{"mapId": 10601, "x": 12, "y": 15}
{"mapId": 10601, "x": 52, "y": 61}


{"mapId": 10602, "x": 60, "y": 40}


{"mapId": 10700, "x": 8, "y": 15}
{"mapId": 10700, "x": 9, "y": 14}
{"mapId": 10700, "x": 9, "y": 15}
{"mapId": 10700, "x": 10, "y": 13}
{"mapId": 10700, "x": 10, "y": 14}
{"mapId": 10700, "x": 105, "y": 29}
{"mapId": 10700, "x": 105, "y": 30}
{"mapId": 10700, "x": 105, "y": 31}
{"mapId": 10700, "x": 106, "y": 31}
{"mapId": 10700, "x": 106, "y": 32}
{"mapId": 10700, "x": 106, "y": 33}
{"mapId": 10700, "x": 107, "y": 33}
{"mapId": 10700, "x": 107, "y": 34}
{"mapId": 10700, "x": 107, "y": 35}
{"mapId": 10700, "x": 108, "y": 35}
{"mapId": 10700, "x": 108, "y": 36}
{"mapId": 10700, "x": 108, "y": 37}


{"mapId": 10701, "x": 8, "y": 21}
{"mapId": 10701, "x": 8, "y": 22}
{"mapId": 10701, "x": 8, "y": 23}
{"mapId": 10701, "x": 9, "y": 19}
{"mapId": 10701, "x": 9, "y": 20}
{"mapId": 10701, "x": 9, "y": 21}
{"mapId": 10701, "x": 9, "y": 121}
{"mapId": 10701, "x": 9, "y": 122}
{"mapId": 10701, "x": 9, "y": 123}
{"mapId": 10701, "x": 10, "y": 17}
{"mapId": 10701, "x": 10, "y": 18}
{"mapId": 10701, "x": 10, "y": 19}
{"mapId": 10701, "x": 10, "y": 123}
{"mapId": 10701, "x": 10, "y": 124}
{"mapId": 10701, "x": 10, "y": 125}
{"mapId": 10701, "x": 102, "y": 13}
{"mapId": 10701, "x": 102, "y": 14}
{"mapId": 10701, "x": 103, "y": 14}
{"mapId": 10701, "x": 103, "y": 15}
{"mapId": 10701, "x": 103, "y": 16}
{"mapId": 10701, "x": 104, "y": 16}
{"mapId": 10701, "x": 104, "y": 17}
{"mapId": 10701, "x": 104, "y": 18}
{"mapId": 10701, "x": 104, "y": 19}
{"mapId": 10701, "x": 106, "y": 121}
{"mapId": 10701, "x": 106, "y": 122}
{"mapId": 10701, "x": 107, "y": 120}
{"mapId": 10701, "x": 107, "y": 121}
{"mapId": 10701, "x": 108, "y": 119}
{"mapId": 10701, "x": 108, "y": 120}


{"mapId": 10702, "x": 20, "y": 116}
{"mapId": 10702, "x": 20, "y": 117}
{"mapId": 10702, "x": 21, "y": 117}
{"mapId": 10702, "x": 21, "y": 118}
{"mapId": 10702, "x": 22, "y": 118}
{"mapId": 10702, "x": 22, "y": 119}
{"mapId": 10702, "x": 23, "y": 119}
{"mapId": 10702, "x": 23, "y": 120}
{"mapId": 10702, "x": 24, "y": 120}
{"mapId": 10702, "x": 24, "y": 121}
{"mapId": 10702, "x": 25, "y": 121}
{"mapId": 10702, "x": 25, "y": 122}
{"mapId": 10702, "x": 83, "y": 15}
{"mapId": 10702, "x": 83, "y": 16}
{"mapId": 10702, "x": 84, "y": 16}
{"mapId": 10702, "x": 84, "y": 17}
{"mapId": 10702, "x": 84, "y": 18}
{"mapId": 10702, "x": 84, "y": 19}
{"mapId": 10702, "x": 85, "y": 19}
{"mapId": 10702, "x": 85, "y": 20}
{"mapId": 10702, "x": 85, "y": 21}
{"mapId": 10702, "x": 85, "y": 22}
{"mapId": 10702, "x": 86, "y": 22}
{"mapId": 10702, "x": 86, "y": 23}


{"mapId": 10703, "x": 8, "y": 78}
{"mapId": 10703, "x": 8, "y": 79}
{"mapId": 10703, "x": 8, "y": 80}
{"mapId": 10703, "x": 9, "y": 44}
{"mapId": 10703, "x": 9, "y": 45}
{"mapId": 10703, "x": 9, "y": 46}
{"mapId": 10703, "x": 9, "y": 76}
{"mapId": 10703, "x": 9, "y": 77}
{"mapId": 10703, "x": 9, "y": 78}
{"mapId": 10703, "x": 10, "y": 41}
{"mapId": 10703, "x": 10, "y": 42}
{"mapId": 10703, "x": 10, "y": 43}
{"mapId": 10703, "x": 10, "y": 44}
{"mapId": 10703, "x": 10, "y": 73}
{"mapId": 10703, "x": 10, "y": 74}
{"mapId": 10703, "x": 10, "y": 75}
{"mapId": 10703, "x": 10, "y": 76}
{"mapId": 10703, "x": 11, "y": 38}
{"mapId": 10703, "x": 11, "y": 39}
{"mapId": 10703, "x": 11, "y": 40}
{"mapId": 10703, "x": 11, "y": 41}
{"mapId": 10703, "x": 24, "y": 18}
{"mapId": 10703, "x": 24, "y": 19}
{"mapId": 10703, "x": 24, "y": 20}
{"mapId": 10703, "x": 25, "y": 16}
{"mapId": 10703, "x": 25, "y": 17}
{"mapId": 10703, "x": 25, "y": 18}
{"mapId": 10703, "x": 26, "y": 14}
{"mapId": 10703, "x": 26, "y": 15}
{"mapId": 10703, "x": 26, "y": 16}
{"mapId": 10703, "x": 27, "y": 12}
{"mapId": 10703, "x": 27, "y": 13}
{"mapId": 10703, "x": 27, "y": 14}


{"mapId": 10704, "x": 8, "y": 106}
{"mapId": 10704, "x": 8, "y": 107}
{"mapId": 10704, "x": 9, "y": 107}
{"mapId": 10704, "x": 9, "y": 108}
{"mapId": 10704, "x": 10, "y": 108}
{"mapId": 10704, "x": 10, "y": 109}
{"mapId": 10704, "x": 11, "y": 109}
{"mapId": 10704, "x": 11, "y": 110}
{"mapId": 10704, "x": 32, "y": 112}
{"mapId": 10704, "x": 33, "y": 112}
{"mapId": 10704, "x": 88, "y": 113}
{"mapId": 10704, "x": 89, "y": 112}
{"mapId": 10704, "x": 89, "y": 113}
{"mapId": 10704, "x": 90, "y": 111}
{"mapId": 10704, "x": 90, "y": 112}
{"mapId": 10704, "x": 91, "y": 110}
{"mapId": 10704, "x": 91, "y": 111}
{"mapId": 10704, "x": 92, "y": 67}
{"mapId": 10704, "x": 92, "y": 68}
{"mapId": 10704, "x": 92, "y": 69}
{"mapId": 10704, "x": 92, "y": 70}
{"mapId": 10704, "x": 92, "y": 109}
{"mapId": 10704, "x": 92, "y": 110}
{"mapId": 10704, "x": 93, "y": 31}
{"mapId": 10704, "x": 93, "y": 32}
{"mapId": 10704, "x": 93, "y": 33}
{"mapId": 10704, "x": 93, "y": 34}
{"mapId": 10704, "x": 93, "y": 35}
{"mapId": 10704, "x": 93, "y": 36}
{"mapId": 10704, "x": 93, "y": 37}
{"mapId": 10704, "x": 93, "y": 38}
{"mapId": 10704, "x": 93, "y": 39}
{"mapId": 10704, "x": 93, "y": 40}
{"mapId": 10704, "x": 93, "y": 70}
{"mapId": 10704, "x": 93, "y": 71}
{"mapId": 10704, "x": 93, "y": 72}
{"mapId": 10704, "x": 93, "y": 73}


{"mapId": 10705, "x": 8, "y": 26}
{"mapId": 10705, "x": 9, "y": 25}
{"mapId": 10705, "x": 9, "y": 26}
{"mapId": 10705, "x": 10, "y": 24}
{"mapId": 10705, "x": 10, "y": 25}
{"mapId": 10705, "x": 11, "y": 23}
{"mapId": 10705, "x": 11, "y": 24}
{"mapId": 10705, "x": 12, "y": 22}
{"mapId": 10705, "x": 12, "y": 23}
{"mapId": 10705, "x": 13, "y": 22}
{"mapId": 10705, "x": 14, "y": 122}
{"mapId": 10705, "x": 14, "y": 123}
{"mapId": 10705, "x": 15, "y": 123}
{"mapId": 10705, "x": 16, "y": 123}
{"mapId": 10705, "x": 16, "y": 124}
{"mapId": 10705, "x": 17, "y": 124}
{"mapId": 10705, "x": 98, "y": 70}
{"mapId": 10705, "x": 99, "y": 28}
{"mapId": 10705, "x": 99, "y": 29}
{"mapId": 10705, "x": 99, "y": 30}
{"mapId": 10705, "x": 99, "y": 31}
{"mapId": 10705, "x": 99, "y": 32}
{"mapId": 10705, "x": 99, "y": 33}
{"mapId": 10705, "x": 99, "y": 70}
{"mapId": 10705, "x": 100, "y": 33}
{"mapId": 10705, "x": 100, "y": 34}
{"mapId": 10705, "x": 100, "y": 35}
{"mapId": 10705, "x": 100, "y": 36}
{"mapId": 10705, "x": 100, "y": 37}
{"mapId": 10705, "x": 100, "y": 38}
{"mapId": 10705, "x": 101, "y": 38}
{"mapId": 10705, "x": 101, "y": 39}
{"mapId": 10705, "x": 101, "y": 40}
{"mapId": 10705, "x": 101, "y": 41}
{"mapId": 10705, "x": 101, "y": 42}


{"mapId": 10706, "x": 16, "y": 107}
{"mapId": 10706, "x": 17, "y": 107}
{"mapId": 10706, "x": 57, "y": 98}
{"mapId": 10706, "x": 58, "y": 98}
{"mapId": 10706, "x": 81, "y": 97}
{"mapId": 10706, "x": 82, "y": 97}
{"mapId": 10706, "x": 86, "y": 14}
{"mapId": 10706, "x": 87, "y": 14}
{"mapId": 10706, "x": 88, "y": 14}
{"mapId": 10706, "x": 89, "y": 14}
{"mapId": 10706, "x": 90, "y": 14}


{"mapId": 10707, "x": 11, "y": 16}
{"mapId": 10707, "x": 11, "y": 17}
{"mapId": 10707, "x": 12, "y": 16}
{"mapId": 10707, "x": 13, "y": 15}
{"mapId": 10707, "x": 13, "y": 16}
{"mapId": 10707, "x": 14, "y": 15}
{"mapId": 10707, "x": 15, "y": 14}
{"mapId": 10707, "x": 15, "y": 15}
{"mapId": 10707, "x": 16, "y": 14}
{"mapId": 10707, "x": 17, "y": 14}
{"mapId": 10707, "x": 43, "y": 49}
{"mapId": 10707, "x": 44, "y": 49}
{"mapId": 10707, "x": 86, "y": 12}
{"mapId": 10707, "x": 87, "y": 12}
{"mapId": 10707, "x": 87, "y": 13}
{"mapId": 10707, "x": 88, "y": 13}
{"mapId": 10707, "x": 88, "y": 14}
{"mapId": 10707, "x": 89, "y": 14}
{"mapId": 10707, "x": 89, "y": 15}
{"mapId": 10707, "x": 90, "y": 15}
{"mapId": 10707, "x": 90, "y": 16}
{"mapId": 10707, "x": 91, "y": 16}


{"mapId": 10800, "x": 28, "y": 40}
{"mapId": 10800, "x": 28, "y": 41}
{"mapId": 10800, "x": 75, "y": 97}
{"mapId": 10800, "x": 76, "y": 97}


{"mapId": 10801, "x": 75, "y": 15}
{"mapId": 10801, "x": 99, "y": 38}


{"mapId": 10802, "x": 11, "y": 13}
{"mapId": 10802, "x": 95, "y": 16}


{"mapId": 10803, "x": 8, "y": 47}
{"mapId": 10803, "x": 49, "y": 14}


{"mapId": 10804, "x": 43, "y": 17}
{"mapId": 10804, "x": 54, "y": 85}


{"mapId": 10805, "x": 49, "y": 22}
{"mapId": 10805, "x": 77, "y": 16}


{"mapId": 10806, "x": 98, "y": 15}
{"mapId": 10806, "x": 98, "y": 75}


{"mapId": 10807, "x": 13, "y": 15}
{"mapId": 10807, "x": 87, "y": 14}


{"mapId": 10808, "x": 95, "y": 15}
{"mapId": 10808, "x": 96, "y": 48}


{"mapId": 10809, "x": 10, "y": 20}
{"mapId": 10809, "x": 99, "y": 19}


{"mapId": 10810, "x": 16, "y": 22}
{"mapId": 10810, "x": 56, "y": 16}


{"mapId": 10811, "x": 18, "y": 143}
{"mapId": 10811, "x": 47, "y": 16}
{"mapId": 10811, "x": 78, "y": 122}
{"mapId": 10811, "x": 78, "y": 186}
{"mapId": 10811, "x": 79, "y": 185}
{"mapId": 10811, "x": 79, "y": 186}
{"mapId": 10811, "x": 80, "y": 184}
{"mapId": 10811, "x": 80, "y": 185}
{"mapId": 10811, "x": 81, "y": 184}


{"mapId": 10812, "x": 9, "y": 17}
{"mapId": 10812, "x": 10, "y": 16}
{"mapId": 10812, "x": 10, "y": 17}
{"mapId": 10812, "x": 11, "y": 15}
{"mapId": 10812, "x": 11, "y": 16}
{"mapId": 10812, "x": 12, "y": 15}
{"mapId": 10812, "x": 65, "y": 153}
{"mapId": 10812, "x": 66, "y": 152}
{"mapId": 10812, "x": 66, "y": 153}
{"mapId": 10812, "x": 67, "y": 151}
{"mapId": 10812, "x": 67, "y": 152}


{"mapId": 10813, "x": 13, "y": 14}
{"mapId": 10813, "x": 14, "y": 13}
{"mapId": 10813, "x": 14, "y": 14}
{"mapId": 10813, "x": 15, "y": 12}
{"mapId": 10813, "x": 15, "y": 13}
{"mapId": 10813, "x": 16, "y": 12}
{"mapId": 10813, "x": 76, "y": 21}


{"mapId": 10814, "x": 8, "y": 158}
{"mapId": 10814, "x": 9, "y": 158}
{"mapId": 10814, "x": 9, "y": 159}
{"mapId": 10814, "x": 10, "y": 159}
{"mapId": 10814, "x": 10, "y": 160}
{"mapId": 10814, "x": 11, "y": 39}
{"mapId": 10814, "x": 32, "y": 82}
{"mapId": 10814, "x": 47, "y": 85}


{"mapId": 10815, "x": 27, "y": 153}
{"mapId": 10815, "x": 28, "y": 153}
{"mapId": 10815, "x": 28, "y": 154}
{"mapId": 10815, "x": 29, "y": 154}
{"mapId": 10815, "x": 29, "y": 155}
{"mapId": 10815, "x": 30, "y": 155}
{"mapId": 10815, "x": 65, "y": 14}
{"mapId": 10815, "x": 66, "y": 14}
{"mapId": 10815, "x": 66, "y": 15}
{"mapId": 10815, "x": 67, "y": 15}
{"mapId": 10815, "x": 67, "y": 16}


{"mapId": 10816, "x": 12, "y": 13}
{"mapId": 10816, "x": 94, "y": 13}
{"mapId": 10816, "x": 95, "y": 13}
{"mapId": 10816, "x": 95, "y": 14}
{"mapId": 10816, "x": 96, "y": 14}
{"mapId": 10816, "x": 96, "y": 15}
{"mapId": 10816, "x": 97, "y": 15}


{"mapId": 10817, "x": 28, "y": 78}
{"mapId": 10817, "x": 48, "y": 90}
{"mapId": 10817, "x": 73, "y": 137}
{"mapId": 10817, "x": 74, "y": 23}
{"mapId": 10817, "x": 74, "y": 136}
{"mapId": 10817, "x": 74, "y": 137}
{"mapId": 10817, "x": 75, "y": 135}
{"mapId": 10817, "x": 75, "y": 136}


{"mapId": 10818, "x": 15, "y": 176}
{"mapId": 10818, "x": 16, "y": 14}
{"mapId": 10818, "x": 16, "y": 15}
{"mapId": 10818, "x": 16, "y": 176}
{"mapId": 10818, "x": 16, "y": 177}
{"mapId": 10818, "x": 17, "y": 13}
{"mapId": 10818, "x": 17, "y": 14}
{"mapId": 10818, "x": 17, "y": 177}
{"mapId": 10818, "x": 17, "y": 178}
{"mapId": 10818, "x": 18, "y": 12}
{"mapId": 10818, "x": 18, "y": 13}


{"mapId": 10819, "x": 55, "y": 13}
{"mapId": 10819, "x": 56, "y": 13}
{"mapId": 10819, "x": 56, "y": 14}
{"mapId": 10819, "x": 57, "y": 14}
{"mapId": 10819, "x": 57, "y": 15}
{"mapId": 10819, "x": 58, "y": 15}
{"mapId": 10819, "x": 93, "y": 162}


{"mapId": 10820, "x": 10, "y": 17}





[sound]
//.\sound\SoundList.lst
//30001: 30001.wav
//30002: 30002.wav


SoundManager.cs
//  public static class SoundList
//  public static int
            None = 0,
            Music = 0,

            ExineIntroMusic = 10000,
            ExineSelectMusic = 10001,
            ...




client>MapObject.cs > DrawChat 참조로 접근//주석치면 화면상에 안뜸
client>MapObject.cs > Chat 참조로 접근
ExineMainScene.cs >  private void ObjectChat(ServerPacket.ObjectChat p) 참고

CMain is main 

-config file 
 [Graphics]
 Resolution=1024

 [Network]
 UseConfig=True
 IPAddress=127.0.0.1
 Port=7000

 [Launcher]
 Enabled=False

[MirControl/MirScene.cs]
@fix
public static MirScene ActiveScene = new LoginScene();
=>public static MirScene ActiveScene = new OpeningScene();

@fix
protected MirScene()
{
 ...
 BackColour = Color.Magenta;
 =>BackColour = Color.Black;
 ...
}


[MirControl/ExineImageControl.cs]
@color ok (Tint Color Apply to File With Mask)
Library.DrawTinted(Index, DisplayLocation, ForeColour, Color.FromArgb(100,Color.Red), true);//test


TintColour = Color.FromArgb(100,Color.BlueViolet),


[MLibrary.cs]
public void ExineDrawTinted(int index, Point point, Color colour, Color Tint, bool offSet = false, bool isBlending=false, float rate = 1 )
        {
            if (!CheckImage(index))
                return;

            MImage mi = _images[index];

            if (offSet) point.Offset(mi.X, mi.Y);

            if (point.X >= Settings.ScreenWidth || point.Y >= Settings.ScreenHeight || point.X + mi.Width < 0 || point.Y + mi.Height < 0)
                return;

            bool oldBlend = DXManager.Blending;
            if(isBlending)DXManager.SetBlend(true, rate);
            DXManager.Draw(mi.Image, new Rectangle(0, 0, mi.Width, mi.Height), new Vector3((float)point.X, (float)point.Y, 0.0F), colour);
            if (isBlending) DXManager.SetBlend(oldBlend);
            if (mi.HasMask)
            {
                DXManager.Draw(mi.MaskImage, new Rectangle(0, 0, mi.Width, mi.Height), new Vector3((float)point.X, (float)point.Y, 0.0F), Tint);
            }

            mi.CleanTime = CMain.Time + Settings.CleanDelay;
        }

=> Apply ExineImageControl.cs
=> 1) Color is Gray Only(maybe)
=> 2) Mask is must same size and position is matched!



[MirGraphics/MLibrary.cs]
@add
public static readonly MLibrary ExineOpening = new MLibrary(Settings.DataPath + "ExineOpening");
public static readonly MLibrary ExineLogin = new MLibrary(Settings.DataPath + "ExineLogin");
public static readonly MLibrary ExineNewChar = new MLibrary(Settings.DataPath + "ExineNewChar");


[MirObject/PlayerObject.cs]
  public void DrawHead()
        {
            if (HairLibrary != null)
                HairLibrary.Draw(DrawFrame + HairOffSet, DrawLocation, DrawColour, true);
        }

         public void DrawBody()
        {
            bool oldGrayScale = DXManager.GrayScale;
            Color drawColour = ApplyDrawColour();                     

            if (BodyLibrary != null)
                BodyLibrary.Draw(DrawFrame + ArmourOffSet, DrawLocation, drawColour, true);

            DXManager.SetGrayscale(oldGrayScale);

            //BodyLibrary.DrawTinted(DrawFrame + ArmourOffSet, DrawLocation, DrawColour, Color.DarkSeaGreen);
        }
=> When Create Char, Send Player Color Info to Server, 
=> When Login, Send Player Info With Color to Client.
=> Draw Tint



intro music : 10146


private void Login(ServerPacket.LoginSuccess p)
=>Change to GameScene


--------------------------------------------------------
Network Original Flow
xxxScene.cs - Network.Connect();//Try Conenct to Server
 > CMain.cs -  Network.Process();//loop
 > Network.cs - public static void Process() 
    {
        ...
        if (!_receiveList.TryDequeue(out Packet p) || p == null) continue;
        MirScene.ActiveScene.ProcessPacket(p);
    }
 > xxxScene.cs - ProcessPacket(Packet p)
    {
        ...
        case (short)ServerPacketIds.Connected:
                        Network.Connected = true;
                        SendVersion();
                        break;
        ...
    }
 > xxxScene.cs - SendVersion()
    {
        ...
        C.ClientVersion p = new ClientPacket.ClientVersion();
        ...
        Network.Enqueue(p);
        ...
    }
 > xxxScene.cs - ProcessPacket(Packet p)
    {
        ...
        case (short)ServerPacketIds.ClientVersion:
                    ClientVersion((ServerPacket.ClientVersion) p);
                    break;
        ...
    }
 > xxxScene.cs - ClientVersion(ServerPacket.ClientVersion p)
    {
        ...
       switch (p.Result)
       ..
       case 1:
        _loginDialog.Show(); 
        break;
        ...
    }

 //new Account
 > xxxScene.cs - CreateAccount()
   {
    ...
        Network.Enqueue(new ClientPacket.NewAccount
            {
                    AccountID = AccountIDTextBox.Text,
                    Password = Password1TextBox.Text,
                    EMailAddress = EMailTextBox.Text,
                    BirthDate = !string.IsNullOrEmpty(BirthDateTextBox.Text)
                                        ? DateTime.Parse(BirthDateTextBox.Text)
                                        : DateTime.MinValue,
                    UserName = UserNameTextBox.Text,
                    SecretQuestion = QuestionTextBox.Text,
                    SecretAnswer = AnswerTextBox.Text,
             }
         );
    }

 > xxxScene.cs - ProcessPacket(Packet p)
   {
        ...
        case (short)ServerPacketIds.NewAccount:
                    NewAccount((ServerPacket.NewAccount) p);
                    break;
        ...
   }

 > xxxScene.cs - NewAccount(ServerPacket.NewAccount p)
   {
        ...
        switch (p.Result)
        {
            ...
            case 8: "Your account was created successfully.");  break;
        }
   }

///login
 > xxxScene.cs - class LoginDialog - OKButton.Click += (o, e) => 
    {
        Login();
    }
 > xxxScene.cs - Login()
    {
        Network.Enqueue(
            new ClientPacket.Login 
            {
                AccountID = AccountIDTextBox.Text, 
                Password = PasswordTextBox.Text
            }
        );
    }
 > xxxScene.cs - ProcessPacket(Packet p)
    {
        ...
        case (short)ServerPacketIds.LoginBanned:
                    Login((ServerPacket.LoginBanned) p);
                    break;

        case (short)ServerPacketIds.LoginSuccess:
                    Login((ServerPacket.LoginSuccess) p);
                    break;
        ...
    }
 > xxxScene.cs - Login(ServerPacket.LoginSuccess p)
    {
        Dispose();
        ActiveScene = new SelectScene(p.Characters);
    }
   
 > SelectScene.cs  ////new cha
    Network.Enqueue(
        new ClientPacket.NewCharacter
        {
            Name = _character.NameTextBox.Text,
            Class = _character.Class, 
            Gender = _character.Gender
        }
    );

 > SelectScene.cs ////del cha
    Network.Enqueue(
        new ClientPacket.DeleteCharacter 
        { 
            CharacterIndex = index 
        }
    );

 > SelectScene.cs - StartXam()
    {
        if (!Libraries.Loaded)
        {
            ...
            StartXam();
        }

        Network.Enqueue(
            new ClientPacket.StartXam
            {
                CharacterIndex = Characters[_selected].Index
                //p.Characters[0].Index //index is all char real index
            }
        );
    }

> SelectScene.cs - ProcessPacket(Packet p)
    {
        ...
        case (short)ServerPacketIds.StartXam:
                    StartXam((ServerPacket.StartXam)p);
                    break;
        ...
    }

    SelectScene.cs - StartXam(ServerPacket.StartXam p)
    {
        ...
        case 4:
            Settings.Resolution = 1024;
            CMain.SetResolution(1024, 768);
            ActiveScene = new XamScene();
            Dispose();
            break;
    }




//main network
     NewHeroDialog.OnCreateCharacter += (o, e) =>
            {
                Network.Enqueue(new ClientPacket.NewHero
                {
                    Name = NewHeroDialog.NameTextBox.Text,
                    Class = NewHeroDialog.Class,
                    Gender = NewHeroDialog.Gender
                });
            };


    case KeybindOptions.Pickup:
        if (CMain.Time > PickUpTime)
        {
            PickUpTime = CMain.Time + 200;
            Network.Enqueue(new ClientPacket.PickUp());
        }
        break;

        Network.Enqueue(new ClientPacket.TradeRequest());

        Network.Enqueue(new ClientPacket.ChangePMode { Mode = PetMode.Both });
        Network.Enqueue(new ClientPacket.ChangePMode { Mode = PetMode.MoveOnly });
        Network.Enqueue(new ClientPacket.ChangePMode { Mode = PetMode.AttackOnly });
        Network.Enqueue(new ClientPacket.ChangePMode { Mode = PetMode.None });
         Network.Enqueue(new ClientPacket.ChangePMode { Mode = PetMode.FocusMasterTarget });
         Network.Enqueue(new ClientPacket.IntelligentCreaturePickup { MouseMode = false, Location = MapControl.MapLocation });
         Network.Enqueue(new ClientPacket.IntelligentCreaturePickup { MouseMode = true, Location = MapControl.MapLocation });

         ChangeAttackMode();
         Network.Enqueue(new ClientPacket.ChangeAMode { Mode = AttackMode.Peace });
         Network.Enqueue(new ClientPacket.ChangeAMode { Mode = AttackMode.Group });
         Network.Enqueue(new ClientPacket.ChangeAMode { Mode = AttackMode.Guild });
         Network.Enqueue(new ClientPacket.ChangeAMode { Mode = AttackMode.EnemyGuild });
         Network.Enqueue(new ClientPacket.ChangeAMode { Mode = AttackMode.RedBrown });
         Network.Enqueue(new ClientPacket.ChangeAMode { Mode = AttackMode.All });


          public void ChangePetMode()
        {
            switch (PMode)
            {
                case PetMode.Both:
                    Network.Enqueue(new ClientPacket.ChangePMode { Mode = PetMode.MoveOnly });
                    return;
                case PetMode.MoveOnly:
                    Network.Enqueue(new ClientPacket.ChangePMode { Mode = PetMode.AttackOnly });
                    return;
                case PetMode.AttackOnly:
                    Network.Enqueue(new ClientPacket.ChangePMode { Mode = PetMode.None });
                    return;
                case PetMode.None:
                    Network.Enqueue(new ClientPacket.ChangePMode { Mode = PetMode.FocusMasterTarget });
                    return;
                case PetMode.FocusMasterTarget:
                    Network.Enqueue(new ClientPacket.ChangePMode { Mode = PetMode.Both });
                    return;
            }
        }
        public void ChangeAttackMode()
        {
            switch (AMode)
            {
                case AttackMode.Peace:
                    Network.Enqueue(new ClientPacket.ChangeAMode { Mode = AttackMode.Group });
                    return;
                case AttackMode.Group:
                    Network.Enqueue(new ClientPacket.ChangeAMode { Mode = AttackMode.Guild });
                    return;
                case AttackMode.Guild:
                    Network.Enqueue(new ClientPacket.ChangeAMode { Mode = AttackMode.EnemyGuild });
                    return;
                case AttackMode.EnemyGuild:
                    Network.Enqueue(new ClientPacket.ChangeAMode { Mode = AttackMode.RedBrown });
                    return;
                case AttackMode.RedBrown:
                    Network.Enqueue(new ClientPacket.ChangeAMode { Mode = AttackMode.All });
                    return;
                case AttackMode.All:
                    Network.Enqueue(new ClientPacket.ChangeAMode { Mode = AttackMode.Peace });
                    return;
            }
        }

        public override void ProcessPacket(Packet p)
        {
            switch (p.Index)
            {
                case (short)ServerPacketIds.KeepAlive:
                    KeepAlive((ServerPacket.KeepAlive)p);
                    break;
                case (short)ServerPacketIds.MapInformation: //MapInfo
                    MapInformation((ServerPacket.MapInformation)p);
                    break;
                case (short)ServerPacketIds.NewMapInfo:
                    NewMapInfo((ServerPacket.NewMapInfo)p);
                    break;
                case (short)ServerPacketIds.WorldMapSetup:
                    WorldMapSetup((ServerPacket.WorldMapSetupInfo)p);
                    break;
                case (short)ServerPacketIds.SearchMapResult:
                    SearchMapResult((ServerPacket.SearchMapResult)p);
                    break;
                case (short)ServerPacketIds.UserInformation:
                    UserInformation((ServerPacket.UserInformation)p);
                    break;
                case (short)ServerPacketIds.UserSlotsRefresh:
                    UserSlotsRefresh((ServerPacket.UserSlotsRefresh)p);
                    break;
                case (short)ServerPacketIds.UserLocation:
                    UserLocation((ServerPacket.UserLocation)p);
                    break;
                case (short)ServerPacketIds.ObjectPlayer:
                    ObjectPlayer((ServerPacket.ObjectPlayer)p);
                    break;
                case (short)ServerPacketIds.ObjectHero:
                    ObjectHero((ServerPacket.ObjectHero)p);
                    break;
                case (short)ServerPacketIds.ObjectRemove:
                    ObjectRemove((ServerPacket.ObjectRemove)p);
                    break;
                case (short)ServerPacketIds.ObjectTurn:
                    ObjectTurn((ServerPacket.ObjectTurn)p);
                    break;
                case (short)ServerPacketIds.ObjectWalk:
                    ObjectWalk((ServerPacket.ObjectWalk)p);
                    break;
                case (short)ServerPacketIds.ObjectRun:
                    ObjectRun((ServerPacket.ObjectRun)p);
                    break;
                case (short)ServerPacketIds.Chat:
                    ReceiveChat((ServerPacket.Chat)p);
                    break;
                case (short)ServerPacketIds.ObjectChat:
                    ObjectChat((ServerPacket.ObjectChat)p);
                    break;
                case (short)ServerPacketIds.MoveItem:
                    MoveItem((ServerPacket.MoveItem)p);
                    break;
                case (short)ServerPacketIds.EquipItem:
                    EquipItem((ServerPacket.EquipItem)p);
                    break;
                case (short)ServerPacketIds.MergeItem:
                    MergeItem((ServerPacket.MergeItem)p);
                    break;
                case (short)ServerPacketIds.RemoveItem:
                    RemoveItem((ServerPacket.RemoveItem)p);
                    break;
                case (short)ServerPacketIds.RemoveSlotItem:
                    RemoveSlotItem((ServerPacket.RemoveSlotItem)p);
                    break;
                case (short)ServerPacketIds.TakeBackItem:
                    TakeBackItem((ServerPacket.TakeBackItem)p);
                    break;
                case (short)ServerPacketIds.StoreItem:
                    StoreItem((ServerPacket.StoreItem)p);
                    break;
                case (short)ServerPacketIds.DepositRefineItem:
                    DepositRefineItem((ServerPacket.DepositRefineItem)p);
                    break;
                case (short)ServerPacketIds.RetrieveRefineItem:
                    RetrieveRefineItem((ServerPacket.RetrieveRefineItem)p);
                    break;
                case (short)ServerPacketIds.RefineCancel:
                    RefineCancel((ServerPacket.RefineCancel)p);
                    break;
                case (short)ServerPacketIds.RefineItem:
                    RefineItem((ServerPacket.RefineItem)p);
                    break;
                case (short)ServerPacketIds.DepositTradeItem:
                    DepositTradeItem((ServerPacket.DepositTradeItem)p);
                    break;
                case (short)ServerPacketIds.RetrieveTradeItem:
                    RetrieveTradeItem((ServerPacket.RetrieveTradeItem)p);
                    break;
                case (short)ServerPacketIds.SplitItem:
                    SplitItem((ServerPacket.SplitItem)p);
                    break;
                case (short)ServerPacketIds.SplitItem1:
                    SplitItem1((ServerPacket.SplitItem1)p);
                    break;
                case (short)ServerPacketIds.UseItem:
                    UseItem((ServerPacket.UseItem)p);
                    break;
                case (short)ServerPacketIds.DropItem:
                    DropItem((ServerPacket.DropItem)p);
                    break;
                case (short)ServerPacketIds.TakeBackHeroItem:
                    TakeBackHeroItem((ServerPacket.TakeBackHeroItem)p);
                    break;
                case (short)ServerPacketIds.TransferHeroItem:
                    TransferHeroItem((ServerPacket.TransferHeroItem)p);
                    break;
                case (short)ServerPacketIds.PlayerUpdate:
                    PlayerUpdate((ServerPacket.PlayerUpdate)p);
                    break;
                case (short)ServerPacketIds.PlayerInspect:
                    PlayerInspect((ServerPacket.PlayerInspect)p);
                    break;
                case (short)ServerPacketIds.LogOutSuccess:
                    LogOutSuccess((ServerPacket.LogOutSuccess)p);
                    break;
                case (short)ServerPacketIds.LogOutFailed:
                    LogOutFailed((ServerPacket.LogOutFailed)p);
                    break;
                case (short)ServerPacketIds.ReturnToLogin:
                    ReturnToLogin((ServerPacket.ReturnToLogin)p);
                    break;
                case (short)ServerPacketIds.TimeOfDay:
                    TimeOfDay((ServerPacket.TimeOfDay)p);
                    break;
                case (short)ServerPacketIds.ChangeAMode:
                    ChangeAMode((ServerPacket.ChangeAMode)p);
                    break;
                case (short)ServerPacketIds.ChangePMode:
                    ChangePMode((ServerPacket.ChangePMode)p);
                    break;
                case (short)ServerPacketIds.ObjectItem:
                    ObjectItem((ServerPacket.ObjectItem)p);
                    break;
                case (short)ServerPacketIds.ObjectGold:
                    ObjectGold((ServerPacket.ObjectGold)p);
                    break;
                case (short)ServerPacketIds.GainedItem:
                    GainedItem((ServerPacket.GainedItem)p);
                    break;
                case (short)ServerPacketIds.GainedGold:
                    GainedGold((ServerPacket.GainedGold)p);
                    break;
                case (short)ServerPacketIds.LoseGold:
                    LoseGold((ServerPacket.LoseGold)p);
                    break;
                case (short)ServerPacketIds.GainedCredit:
                    GainedCredit((ServerPacket.GainedCredit)p);
                    break;
                case (short)ServerPacketIds.LoseCredit:
                    LoseCredit((ServerPacket.LoseCredit)p);
                    break;
                case (short)ServerPacketIds.ObjectMonster:
                    ObjectMonster((ServerPacket.ObjectMonster)p);
                    break;
                case (short)ServerPacketIds.ObjectAttack:
                    ObjectAttack((ServerPacket.ObjectAttack)p);
                    break;
                case (short)ServerPacketIds.Struck:
                    Struck((ServerPacket.Struck)p);
                    break;
                case (short)ServerPacketIds.DamageIndicator:
                    DamageIndicator((ServerPacket.DamageIndicator)p);
                    break;
                case (short)ServerPacketIds.ObjectStruck:
                    ObjectStruck((ServerPacket.ObjectStruck)p);
                    break;
                case (short)ServerPacketIds.DuraChanged:
                    DuraChanged((ServerPacket.DuraChanged)p);
                    break;
                case (short)ServerPacketIds.HealthChanged:
                    HealthChanged((ServerPacket.HealthChanged)p);
                    break;
                case (short)ServerPacketIds.HeroHealthChanged:
                    HeroHealthChanged((ServerPacket.HeroHealthChanged)p);
                    break;
                case (short)ServerPacketIds.DeleteItem:
                    DeleteItem((ServerPacket.DeleteItem)p);
                    break;
                case (short)ServerPacketIds.Death:
                    Death((ServerPacket.Death)p);
                    break;
                case (short)ServerPacketIds.ObjectDied:
                    ObjectDied((ServerPacket.ObjectDied)p);
                    break;
                case (short)ServerPacketIds.ColourChanged:
                    ColourChanged((ServerPacket.ColourChanged)p);
                    break;
                case (short)ServerPacketIds.ObjectColourChanged:
                    ObjectColourChanged((ServerPacket.ObjectColourChanged)p);
                    break;
                case (short)ServerPacketIds.ObjectGuildNameChanged:
                    ObjectGuildNameChanged((ServerPacket.ObjectGuildNameChanged)p);
                    break;
                case (short)ServerPacketIds.GainExperience:
                    GainExperience((ServerPacket.GainExperience)p);
                    break;
                case (short)ServerPacketIds.GainHeroExperience:
                    GainHeroExperience((ServerPacket.GainHeroExperience)p);
                    break;
                case (short)ServerPacketIds.LevelChanged:
                    LevelChanged((ServerPacket.LevelChanged)p);
                    break;
                case (short)ServerPacketIds.HeroLevelChanged:
                    HeroLevelChanged((ServerPacket.HeroLevelChanged)p);
                    break;
                case (short)ServerPacketIds.ObjectLeveled:
                    ObjectLeveled((ServerPacket.ObjectLeveled)p);
                    break;
                case (short)ServerPacketIds.ObjectHarvest:
                    ObjectHarvest((ServerPacket.ObjectHarvest)p);
                    break;
                case (short)ServerPacketIds.ObjectHarvested:
                    ObjectHarvested((ServerPacket.ObjectHarvested)p);
                    break;
                case (short)ServerPacketIds.ObjectNpc:
                    ObjectNPC((ServerPacket.ObjectNPC)p);
                    break;
                case (short)ServerPacketIds.NPCResponse:
                    NPCResponse((ServerPacket.NPCResponse)p);
                    break;
                case (short)ServerPacketIds.ObjectHide:
                    ObjectHide((ServerPacket.ObjectHide)p);
                    break;
                case (short)ServerPacketIds.ObjectShow:
                    ObjectShow((ServerPacket.ObjectShow)p);
                    break;
                case (short)ServerPacketIds.Poisoned:
                    Poisoned((ServerPacket.Poisoned)p);
                    break;
                case (short)ServerPacketIds.ObjectPoisoned:
                    ObjectPoisoned((ServerPacket.ObjectPoisoned)p);
                    break;
                case (short)ServerPacketIds.MapChanged:
                    MapChanged((ServerPacket.MapChanged)p);
                    break;
                case (short)ServerPacketIds.ObjectTeleportOut:
                    ObjectTeleportOut((ServerPacket.ObjectTeleportOut)p);
                    break;
                case (short)ServerPacketIds.ObjectTeleportIn:
                    ObjectTeleportIn((ServerPacket.ObjectTeleportIn)p);
                    break;
                case (short)ServerPacketIds.TeleportIn:
                    TeleportIn();
                    break;
                case (short)ServerPacketIds.NPCGoods:
                    NPCGoods((ServerPacket.NPCGoods)p);
                    break;
                case (short)ServerPacketIds.NPCSell:
                    NPCSell();
                    break;
                case (short)ServerPacketIds.NPCRepair:
                    NPCRepair((ServerPacket.NPCRepair)p);
                    break;
                case (short)ServerPacketIds.NPCSRepair:
                    NPCSRepair((ServerPacket.NPCSRepair)p);
                    break;
                case (short)ServerPacketIds.NPCRefine:
                    NPCRefine((ServerPacket.NPCRefine)p);
                    break;
                case (short)ServerPacketIds.NPCCheckRefine:
                    NPCCheckRefine((ServerPacket.NPCCheckRefine)p);
                    break;
                case (short)ServerPacketIds.NPCCollectRefine:
                    NPCCollectRefine((ServerPacket.NPCCollectRefine)p);
                    break;
                case (short)ServerPacketIds.NPCReplaceWedRing:
                    NPCReplaceWedRing((ServerPacket.NPCReplaceWedRing)p);
                    break;
                case (short)ServerPacketIds.NPCStorage:
                    NPCStorage();
                    break;
                case (short)ServerPacketIds.NPCRequestInput:
                    NPCRequestInput((ServerPacket.NPCRequestInput)p);
                    break;
                case (short)ServerPacketIds.SellItem:
                    SellItem((ServerPacket.SellItem)p);
                    break;
                case (short)ServerPacketIds.CraftItem:
                    CraftItem((ServerPacket.CraftItem)p);
                    break;
                case (short)ServerPacketIds.RepairItem:
                    RepairItem((ServerPacket.RepairItem)p);
                    break;
                case (short)ServerPacketIds.ItemRepaired:
                    ItemRepaired((ServerPacket.ItemRepaired)p);
                    break;
                case (short)ServerPacketIds.ItemSlotSizeChanged:
                    ItemSlotSizeChanged((ServerPacket.ItemSlotSizeChanged)p);
                    break;
                case (short)ServerPacketIds.ItemSealChanged:
                    ItemSealChanged((ServerPacket.ItemSealChanged)p);
                    break;
                case (short)ServerPacketIds.NewMagic:
                    NewMagic((ServerPacket.NewMagic)p);
                    break;
                case (short)ServerPacketIds.MagicLeveled:
                    MagicLeveled((ServerPacket.MagicLeveled)p);
                    break;
                case (short)ServerPacketIds.Magic:
                    Magic((ServerPacket.Magic)p);
                    break;
                case (short)ServerPacketIds.MagicDelay:
                    MagicDelay((ServerPacket.MagicDelay)p);
                    break;
                case (short)ServerPacketIds.MagicCast:
                    MagicCast((ServerPacket.MagicCast)p);
                    break;
                case (short)ServerPacketIds.ObjectMagic:
                    ObjectMagic((ServerPacket.ObjectMagic)p);
                    break;
                case (short)ServerPacketIds.ObjectProjectile:
                    ObjectProjectile((ServerPacket.ObjectProjectile)p);
                    break;
                case (short)ServerPacketIds.ObjectEffect:
                    ObjectEffect((ServerPacket.ObjectEffect)p);
                    break;
                case (short)ServerPacketIds.RangeAttack:
                    RangeAttack((ServerPacket.RangeAttack)p);
                    break;
                case (short)ServerPacketIds.Pushed:
                    Pushed((ServerPacket.Pushed)p);
                    break;
                case (short)ServerPacketIds.ObjectPushed:
                    ObjectPushed((ServerPacket.ObjectPushed)p);
                    break;
                case (short)ServerPacketIds.ObjectName:
                    ObjectName((ServerPacket.ObjectName)p);
                    break;
                case (short)ServerPacketIds.UserStorage:
                    UserStorage((ServerPacket.UserStorage)p);
                    break;
                case (short)ServerPacketIds.SwitchGroup:
                    SwitchGroup((ServerPacket.SwitchGroup)p);
                    break;
                case (short)ServerPacketIds.DeleteGroup:
                    DeleteGroup();
                    break;
                case (short)ServerPacketIds.DeleteMember:
                    DeleteMember((ServerPacket.DeleteMember)p);
                    break;
                case (short)ServerPacketIds.GroupInvite:
                    GroupInvite((ServerPacket.GroupInvite)p);
                    break;
                case (short)ServerPacketIds.AddMember:
                    AddMember((ServerPacket.AddMember)p);
                    break;
                case (short)ServerPacketIds.GroupMembersMap:
                    GroupMembersMap((ServerPacket.GroupMembersMap)p);
                    break;
                case (short)ServerPacketIds.SendMemberLocation:
                    SendMemberLocation((ServerPacket.SendMemberLocation)p);
                    break;
                case (short)ServerPacketIds.Revived:
                    Revived();
                    break;
                case (short)ServerPacketIds.ObjectRevived:
                    ObjectRevived((ServerPacket.ObjectRevived)p);
                    break;
                case (short)ServerPacketIds.SpellToggle:
                    SpellToggle((ServerPacket.SpellToggle)p);
                    break;
                case (short)ServerPacketIds.ObjectHealth:
                    ObjectHealth((ServerPacket.ObjectHealth)p);
                    break;
                case (short)ServerPacketIds.ObjectMana:
                    ObjectMana((ServerPacket.ObjectMana)p);
                    break;
                case (short)ServerPacketIds.MapEffect:
                    MapEffect((ServerPacket.MapEffect)p);
                    break;
                case (short)ServerPacketIds.AllowObserve:
                    AllowObserve = ((ServerPacket.AllowObserve)p).Allow;
                    break;
                case (short)ServerPacketIds.ObjectRangeAttack:
                    ObjectRangeAttack((ServerPacket.ObjectRangeAttack)p);
                    break;
                case (short)ServerPacketIds.AddBuff:
                    AddBuff((ServerPacket.AddBuff)p);
                    break;
                case (short)ServerPacketIds.RemoveBuff:
                    RemoveBuff((ServerPacket.RemoveBuff)p);
                    break;
                case (short)ServerPacketIds.PauseBuff:
                    PauseBuff((ServerPacket.PauseBuff)p);
                    break;
                case (short)ServerPacketIds.ObjectHidden:
                    ObjectHidden((ServerPacket.ObjectHidden)p);
                    break;
                case (short)ServerPacketIds.RefreshItem:
                    RefreshItem((ServerPacket.RefreshItem)p);
                    break;
                case (short)ServerPacketIds.ObjectSpell:
                    ObjectSpell((ServerPacket.ObjectSpell)p);
                    break;
                case (short)ServerPacketIds.UserDash:
                    UserDash((ServerPacket.UserDash)p);
                    break;
                case (short)ServerPacketIds.ObjectDash:
                    ObjectDash((ServerPacket.ObjectDash)p);
                    break;
                case (short)ServerPacketIds.UserDashFail:
                    UserDashFail((ServerPacket.UserDashFail)p);
                    break;
                case (short)ServerPacketIds.ObjectDashFail:
                    ObjectDashFail((ServerPacket.ObjectDashFail)p);
                    break;
                case (short)ServerPacketIds.NPCConsign:
                    NPCConsign();
                    break;
                case (short)ServerPacketIds.NPCMarket:
                    NPCMarket((ServerPacket.NPCMarket)p);
                    break;
                case (short)ServerPacketIds.NPCMarketPage:
                    NPCMarketPage((ServerPacket.NPCMarketPage)p);
                    break;
                case (short)ServerPacketIds.ConsignItem:
                    ConsignItem((ServerPacket.ConsignItem)p);
                    break;
                case (short)ServerPacketIds.MarketFail:
                    MarketFail((ServerPacket.MarketFail)p);
                    break;
                case (short)ServerPacketIds.MarketSuccess:
                    MarketSuccess((ServerPacket.MarketSuccess)p);
                    break;
                case (short)ServerPacketIds.ObjectSitDown:
                    ObjectSitDown((ServerPacket.ObjectSitDown)p);
                    break;
                case (short)ServerPacketIds.InTrapRock:
                    S.InTrapRock packetdata = (ServerPacket.InTrapRock)p;
                    User.InTrapRock = packetdata.Trapped;
                    break;
                case (short)ServerPacketIds.RemoveMagic:
                    RemoveMagic((ServerPacket.RemoveMagic)p);
                    break;
                case (short)ServerPacketIds.BaseStatsInfo:
                    BaseStatsInfo((ServerPacket.BaseStatsInfo)p);
                    break;
                case (short)ServerPacketIds.HeroBaseStatsInfo:
                    HeroBaseStatsInfo((ServerPacket.HeroBaseStatsInfo)p);
                    break;
                case (short)ServerPacketIds.UserName:
                    UserName((ServerPacket.UserName)p);
                    break;
                case (short)ServerPacketIds.ChatItemStats:
                    ChatItemStats((ServerPacket.ChatItemStats)p);
                    break;
                case (short)ServerPacketIds.GuildInvite:
                    GuildInvite((ServerPacket.GuildInvite)p);
                    break;
                case (short)ServerPacketIds.GuildMemberChange:
                    GuildMemberChange((ServerPacket.GuildMemberChange)p);
                    break;
                case (short)ServerPacketIds.GuildNoticeChange:
                    GuildNoticeChange((ServerPacket.GuildNoticeChange)p);
                    break;
                case (short)ServerPacketIds.GuildStatus:
                    GuildStatus((ServerPacket.GuildStatus)p);
                    break;
                case (short)ServerPacketIds.GuildExpGain:
                    GuildExpGain((ServerPacket.GuildExpGain)p);
                    break;
                case (short)ServerPacketIds.GuildNameRequest:
                    GuildNameRequest((ServerPacket.GuildNameRequest)p);
                    break;
                case (short)ServerPacketIds.GuildStorageGoldChange:
                    GuildStorageGoldChange((ServerPacket.GuildStorageGoldChange)p);
                    break;
                case (short)ServerPacketIds.GuildStorageItemChange:
                    GuildStorageItemChange((ServerPacket.GuildStorageItemChange)p);
                    break;
                case (short)ServerPacketIds.GuildStorageList:
                    GuildStorageList((ServerPacket.GuildStorageList)p);
                    break;
                case (short)ServerPacketIds.GuildRequestWar:
                    GuildRequestWar((ServerPacket.GuildRequestWar)p);
                    break;
                case (short)ServerPacketIds.HeroCreateRequest:
                    HeroCreateRequest((ServerPacket.HeroCreateRequest)p);
                    break;
                case (short)ServerPacketIds.NewHero:
                    NewHero((ServerPacket.NewHero)p);
                    break;
                case (short)ServerPacketIds.HeroInformation:
                    HeroInformation((ServerPacket.HeroInformation)p);
                    break;
                case (short)ServerPacketIds.UpdateHeroSpawnState:
                    UpdateHeroSpawnState((ServerPacket.UpdateHeroSpawnState)p);
                    break;
                case (short)ServerPacketIds.UnlockHeroAutoPot:
                    UnlockHeroAutoPot(true);
                    break;
                case (short)ServerPacketIds.SetAutoPotValue:
                    SetAutoPotValue((ServerPacket.SetAutoPotValue)p);
                    break;
                case (short)ServerPacketIds.SetHeroBehaviour:
                    SetHeroBehaviour((ServerPacket.SetHeroBehaviour)p);
                    break;
                case (short)ServerPacketIds.SetAutoPotItem:
                    SetAutoPotItem((ServerPacket.SetAutoPotItem)p);
                    break;
                case (short)ServerPacketIds.ManageHeroes:
                    ManageHeroes((ServerPacket.ManageHeroes)p);
                    break;
                case (short)ServerPacketIds.ChangeHero:
                    ChangeHero((ServerPacket.ChangeHero)p);
                    break;
                case (short)ServerPacketIds.DefaultNPC:
                    DefaultNPC((ServerPacket.DefaultNPC)p);
                    break;
                case (short)ServerPacketIds.NPCUpdate:
                    NPCUpdate((ServerPacket.NPCUpdate)p);
                    break;
                case (short)ServerPacketIds.NPCImageUpdate:
                    NPCImageUpdate((ServerPacket.NPCImageUpdate)p);
                    break;
                case (short)ServerPacketIds.MarriageRequest:
                    MarriageRequest((ServerPacket.MarriageRequest)p);
                    break;
                case (short)ServerPacketIds.DivorceRequest:
                    DivorceRequest((ServerPacket.DivorceRequest)p);
                    break;
                case (short)ServerPacketIds.MentorRequest:
                    MentorRequest((ServerPacket.MentorRequest)p);
                    break;
                case (short)ServerPacketIds.TradeRequest:
                    TradeRequest((ServerPacket.TradeRequest)p);
                    break;
                case (short)ServerPacketIds.TradeAccept:
                    TradeAccept((ServerPacket.TradeAccept)p);
                    break;
                case (short)ServerPacketIds.TradeGold:
                    TradeGold((ServerPacket.TradeGold)p);
                    break;
                case (short)ServerPacketIds.TradeItem:
                    TradeItem((ServerPacket.TradeItem)p);
                    break;
                case (short)ServerPacketIds.TradeConfirm:
                    TradeConfirm();
                    break;
                case (short)ServerPacketIds.TradeCancel:
                    TradeCancel((ServerPacket.TradeCancel)p);
                    break;
                case (short)ServerPacketIds.MountUpdate:
                    MountUpdate((ServerPacket.MountUpdate)p);
                    break;
                case (short)ServerPacketIds.TransformUpdate:
                    TransformUpdate((ServerPacket.TransformUpdate)p);
                    break;
                case (short)ServerPacketIds.EquipSlotItem:
                    EquipSlotItem((ServerPacket.EquipSlotItem)p);
                    break;
                case (short)ServerPacketIds.FishingUpdate:
                    FishingUpdate((ServerPacket.FishingUpdate)p);
                    break;
                case (short)ServerPacketIds.ChangeQuest:
                    ChangeQuest((ServerPacket.ChangeQuest)p);
                    break;
                case (short)ServerPacketIds.CompleteQuest:
                    CompleteQuest((ServerPacket.CompleteQuest)p);
                    break;
                case (short)ServerPacketIds.ShareQuest:
                    ShareQuest((ServerPacket.ShareQuest)p);
                    break;
                case (short)ServerPacketIds.GainedQuestItem:
                    GainedQuestItem((ServerPacket.GainedQuestItem)p);
                    break;
                case (short)ServerPacketIds.DeleteQuestItem:
                    DeleteQuestItem((ServerPacket.DeleteQuestItem)p);
                    break;
                case (short)ServerPacketIds.CancelReincarnation:
                    User.ReincarnationStopTime = 0;
                    break;
                case (short)ServerPacketIds.RequestReincarnation:
                    if (!User.Dead) return;
                    RequestReincarnation();
                    break;
                case (short)ServerPacketIds.UserBackStep:
                    UserBackStep((ServerPacket.UserBackStep)p);
                    break;
                case (short)ServerPacketIds.ObjectBackStep:
                    ObjectBackStep((ServerPacket.ObjectBackStep)p);
                    break;
                case (short)ServerPacketIds.UserDashAttack:
                    UserDashAttack((ServerPacket.UserDashAttack)p);
                    break;
                case (short)ServerPacketIds.ObjectDashAttack:
                    ObjectDashAttack((ServerPacket.ObjectDashAttack)p);
                    break;
                case (short)ServerPacketIds.UserAttackMove://Warrior Skill - SlashingBurst
                    UserAttackMove((ServerPacket.UserAttackMove)p);
                    break;
                case (short)ServerPacketIds.CombineItem:
                    CombineItem((ServerPacket.CombineItem)p);
                    break;
                case (short)ServerPacketIds.ItemUpgraded:
                    ItemUpgraded((ServerPacket.ItemUpgraded)p);
                    break;
                case (short)ServerPacketIds.SetConcentration:
                    SetConcentration((ServerPacket.SetConcentration)p);
                    break;
                case (short)ServerPacketIds.SetElemental:
                    SetElemental((ServerPacket.SetElemental)p);
                    break;
                case (short)ServerPacketIds.RemoveDelayedExplosion:
                    RemoveDelayedExplosion((ServerPacket.RemoveDelayedExplosion)p);
                    break;
                case (short)ServerPacketIds.ObjectDeco:
                    ObjectDeco((ServerPacket.ObjectDeco)p);
                    break;
                case (short)ServerPacketIds.ObjectSneaking:
                    ObjectSneaking((ServerPacket.ObjectSneaking)p);
                    break;
                case (short)ServerPacketIds.ObjectLevelEffects:
                    ObjectLevelEffects((ServerPacket.ObjectLevelEffects)p);
                    break;
                case (short)ServerPacketIds.SetBindingShot:
                    SetBindingShot((ServerPacket.SetBindingShot)p);
                    break;
                case (short)ServerPacketIds.SendOutputMessage:
                    SendOutputMessage((ServerPacket.SendOutputMessage)p);
                    break;
                case (short)ServerPacketIds.NPCAwakening:
                    NPCAwakening();
                    break;
                case (short)ServerPacketIds.NPCDisassemble:
                    NPCDisassemble();
                    break;
                case (short)ServerPacketIds.NPCDowngrade:
                    NPCDowngrade();
                    break;
                case (short)ServerPacketIds.NPCReset:
                    NPCReset();
                    break;
                case (short)ServerPacketIds.AwakeningNeedMaterials:
                    AwakeningNeedMaterials((ServerPacket.AwakeningNeedMaterials)p);
                    break;
                case (short)ServerPacketIds.AwakeningLockedItem:
                    AwakeningLockedItem((ServerPacket.AwakeningLockedItem)p);
                    break;
                case (short)ServerPacketIds.Awakening:
                    Awakening((ServerPacket.Awakening)p);
                    break;
                case (short)ServerPacketIds.ReceiveMail:
                    ReceiveMail((ServerPacket.ReceiveMail)p);
                    break;
                case (short)ServerPacketIds.MailLockedItem:
                    MailLockedItem((ServerPacket.MailLockedItem)p);
                    break;
                case (short)ServerPacketIds.MailSent:
                    MailSent((ServerPacket.MailSent)p);
                    break;
                case (short)ServerPacketIds.MailSendRequest:
                    MailSendRequest((ServerPacket.MailSendRequest)p);
                    break;
                case (short)ServerPacketIds.ParcelCollected:
                    ParcelCollected((ServerPacket.ParcelCollected)p);
                    break;
                case (short)ServerPacketIds.MailCost:
                    MailCost((ServerPacket.MailCost)p);
                    break;
                case (short)ServerPacketIds.ResizeInventory:
                    ResizeInventory((ServerPacket.ResizeInventory)p);
                    break;
                case (short)ServerPacketIds.ResizeStorage:
                    ResizeStorage((ServerPacket.ResizeStorage)p);
                    break;
                case (short)ServerPacketIds.NewIntelligentCreature:
                    NewIntelligentCreature((ServerPacket.NewIntelligentCreature)p);
                    break;
                case (short)ServerPacketIds.UpdateIntelligentCreatureList:
                    UpdateIntelligentCreatureList((ServerPacket.UpdateIntelligentCreatureList)p);
                    break;
                case (short)ServerPacketIds.IntelligentCreatureEnableRename:
                    IntelligentCreatureEnableRename((ServerPacket.IntelligentCreatureEnableRename)p);
                    break;
                case (short)ServerPacketIds.IntelligentCreaturePickup:
                    IntelligentCreaturePickup((ServerPacket.IntelligentCreaturePickup)p);
                    break;
                case (short)ServerPacketIds.NPCPearlGoods:
                    NPCPearlGoods((ServerPacket.NPCPearlGoods)p);
                    break;
                case (short)ServerPacketIds.FriendUpdate:
                    FriendUpdate((ServerPacket.FriendUpdate)p);
                    break;
                case (short)ServerPacketIds.LoverUpdate:
                    LoverUpdate((ServerPacket.LoverUpdate)p);
                    break;
                case (short)ServerPacketIds.MentorUpdate:
                    MentorUpdate((ServerPacket.MentorUpdate)p);
                    break;
                case (short)ServerPacketIds.GuildBuffList:
                    GuildBuffList((ServerPacket.GuildBuffList)p);
                    break;
                case (short)ServerPacketIds.GameShopInfo:
                    GameShopUpdate((ServerPacket.GameShopInfo)p);
                    break;
                case (short)ServerPacketIds.GameShopStock:
                    GameShopStock((ServerPacket.GameShopStock)p);
                    break;
                case (short)ServerPacketIds.Rankings:
                    Rankings((ServerPacket.Rankings)p);
                    break;
                case (short)ServerPacketIds.Opendoor:
                    Opendoor((ServerPacket.Opendoor)p);
                    break;
                case (short)ServerPacketIds.GetRentedItems:
                    RentedItems((ServerPacket.GetRentedItems)p);
                    break;
                case (short)ServerPacketIds.ItemRentalRequest:
                    ItemRentalRequest((ServerPacket.ItemRentalRequest)p);
                    break;
                case (short)ServerPacketIds.ItemRentalFee:
                    ItemRentalFee((ServerPacket.ItemRentalFee)p);
                    break;
                case (short)ServerPacketIds.ItemRentalPeriod:
                    ItemRentalPeriod((ServerPacket.ItemRentalPeriod)p);
                    break;
                case (short)ServerPacketIds.DepositRentalItem:
                    DepositRentalItem((ServerPacket.DepositRentalItem)p);
                    break;
                case (short)ServerPacketIds.RetrieveRentalItem:
                    RetrieveRentalItem((ServerPacket.RetrieveRentalItem)p);
                    break;
                case (short)ServerPacketIds.UpdateRentalItem:
                    UpdateRentalItem((ServerPacket.UpdateRentalItem)p);
                    break;
                case (short)ServerPacketIds.CancelItemRental:
                    CancelItemRental((ServerPacket.CancelItemRental)p);
                    break;
                case (short)ServerPacketIds.ItemRentalLock:
                    ItemRentalLock((ServerPacket.ItemRentalLock)p);
                    break;
                case (short)ServerPacketIds.ItemRentalPartnerLock:
                    ItemRentalPartnerLock((ServerPacket.ItemRentalPartnerLock)p);
                    break;
                case (short)ServerPacketIds.CanConfirmItemRental:
                    CanConfirmItemRental((ServerPacket.CanConfirmItemRental)p);
                    break;
                case (short)ServerPacketIds.ConfirmItemRental:
                    ConfirmItemRental((ServerPacket.ConfirmItemRental)p);
                    break;
                case (short)ServerPacketIds.OpenBrowser:
                    OpenBrowser((ServerPacket.OpenBrowser)p);
                    break;
                case (short)ServerPacketIds.PlaySound:
                    PlaySound((ServerPacket.PlaySound)p);
                    break;
                case (short)ServerPacketIds.SetTimer:
                    SetTimer((ServerPacket.SetTimer)p);
                    break;
                case (short)ServerPacketIds.ExpireTimer:
                    ExpireTimer((ServerPacket.ExpireTimer)p);
                    break;
                case (short)ServerPacketIds.UpdateNotice:
                    ShowNotice((ServerPacket.UpdateNotice)p);
                    break;
                case (short)ServerPacketIds.Roll:
                    Roll((ServerPacket.Roll)p);
                    break;
                case (short)ServerPacketIds.SetCompass:
                    SetCompass((ServerPacket.SetCompass)p);
                    break;
                default:
                    base.ProcessPacket(p);
                    break;
            }
        }





 
 public override void ProcessPacket(Packet p)
 {
            switch (p.Index)
            {
                case (short)ServerPacketIds.Connected:
                    Network.Connected = true;
                    SendVersion();
                    break;
                case (short)ServerPacketIds.ClientVersion:
                    ClientVersion((ServerPacket.ClientVersion) p);
                    break;
                case (short)ServerPacketIds.NewAccount:
                    NewAccount((ServerPacket.NewAccount) p);
                    break;
                case (short)ServerPacketIds.ChangePassword:
                    ChangePassword((ServerPacket.ChangePassword) p);
                    break;
                case (short)ServerPacketIds.ChangePasswordBanned:
                    ChangePassword((ServerPacket.ChangePasswordBanned) p);
                    break;
                case (short)ServerPacketIds.Login:
                    Login((ServerPacket.Login) p);
                    break;
                case (short)ServerPacketIds.LoginBanned:
                    Login((ServerPacket.LoginBanned) p);
                    break;
                case (short)ServerPacketIds.LoginSuccess:
                    Login((ServerPacket.LoginSuccess) p);
                    break;
                default:
                    base.ProcessPacket(p);
                    break;
            }
 }
...
                case (short)ServerPacketIds.NewCharacter:
                    NewCharacter((ServerPacket.NewCharacter)p);
                    break;
                case (short)ServerPacketIds.NewCharacterSuccess:
                    NewCharacter((ServerPacket.NewCharacterSuccess)p);
                    break;
                case (short)ServerPacketIds.DeleteCharacter:
                    DeleteCharacter((ServerPacket.DeleteCharacter)p);
                    break;
                case (short)ServerPacketIds.DeleteCharacterSuccess:
                    DeleteCharacter((ServerPacket.DeleteCharacterSuccess)p);
                    break;
                case (short)ServerPacketIds.StartGame:
                    StartGame((ServerPacket.StartGame)p);
                    break;
                case (short)ServerPacketIds.StartGameBanned:
                    StartGame((ServerPacket.StartGameBanned)p);
                    break;
                case (short)ServerPacketIds.StartGameDelay:
                    StartGame((ServerPacket.StartGameDelay)p);
                    break;
                default:
                    base.ProcessPacket(p);
                    break;
            }
...
}


Kor ID is Block this Section
Server.Library > Envir.cs =>  static Envir()
        {
            AccountIDReg = new Regex(@"^[A-Za-z0-9]{" + Globals.MinAccountIDLength + "," + Globals.MaxAccountIDLength + "}$");//!!!
            PasswordReg = new Regex(@"^[A-Za-z0-9]{" + Globals.MinPasswordLength + "," + Globals.MaxPasswordLength + "}$");
            EMailReg = new Regex(@"\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*");
            CharacterReg = new Regex(@"^[\u4e00-\u9fa5_A-Za-z0-9]{" + Globals.MinCharacterNameLength + "," + Globals.MaxCharacterNameLength + "}$");  //!!!
        }



public void NewAccount(ClientPackets.NewAccount p, MirConnection c)
{
    ...
    if (!AccountIDReg.IsMatch(p.AccountID)) => if (!string.IsNullOrWhiteSpace(p.AccountID) && p.AccountID.Length > 20)
            {
    ...
}
public int HTTPNewAccount(ClientPackets.NewAccount p, string ip)
{
    ...
    if (!AccountIDReg.IsMatch(p.AccountID)) => if (!string.IsNullOrWhiteSpace(p.AccountID) && p.AccountID.Length > 20)
    ...
}
public void Login(ClientPackets.Login p, MirConnection c)
{
    ...
    if (!AccountIDReg.IsMatch(p.AccountID)) => if (!string.IsNullOrWhiteSpace(p.AccountID) && p.AccountID.Length > 20)
    ...
}
public int HTTPLogin(string AccountID, string Password)
{
    ...
    if (!AccountIDReg.IsMatch(AccountID)) => if (!string.IsNullOrWhiteSpace(AccountID) && AccountID.Length > 20)
    ...
}
public void NewCharacter(ClientPackets.NewCharacter p, MirConnection c, bool IsGm)
{
    ...
    if (!CharacterReg.IsMatch(p.Name)) =>if (!string.IsNullOrWhiteSpace(p.Name) && p.Name.Length > 20)//231107
    ...
}
public bool CanCreateHero(ClientPackets.NewHero p, MirConnection c, bool IsGm)
{
    ...
    if(!CharacterReg.IsMatch(p.Name)) => if (!string.IsNullOrWhiteSpace(p.Name) && p.Name.Length > 20)//231107 
    ...
}





Apply Style and Color data
Shared > ClientPackets.cs > NewCharacter 
Server.lib > CharecterInfo.cs >  
Server.lib >GetInfo > return ...

Shared > ServerPackets.cs >UserInformation
Shared > ServerPackets.cs >ObjectPlayer

Client > PlayerObject.cs => S.ObjectPlayer info> Load


portrate
\Exine\RData\Profiles\charname.jpg
72*72


test
:test.jpg


//track
Server.lib.MirConnection.cs
  var info = new CharacterInfo(p, c) { Index = ++NextCharacterID, AccountInfo = c.Account };

                c.Account.Characters.Add(info);
                CharacterList.Add(info);

                c.Enqueue(new ServerPackets.NewCharacterSuccess { CharInfo = info.ToSelectInfo() });

//  MImage mImage = new MImage(image) { X = x, Y = y };



----------------------------------------------
todo rest make ref Packet.cs >  die, revive
char flow pattern



/*
                        Name = info.Name;
            Settings.LoadTrackedQuests(info.Name);
            NameColour = info.NameColour;
            GuildName = info.GuildName;
            GuildRankName = info.GuildRank;
            Class = info.Class;
            Gender = info.Gender;
            Level = info.Level;

            CurrentLocation = info.Location;
            MapLocation = info.Location;
            ExineMainScene.Scene.MapControl.AddObject(this);

            Direction = info.Direction;
            Hair = info.Hair;

            HP = info.HP;
            MP = info.MP;

            Experience = info.Experience;
            MaxExperience = info.MaxExperience;

            LevelEffects = info.LevelEffects;

            Inventory = info.Inventory;
            Equipment = info.Equipment;
            QuestInventory = info.QuestInventory;

            HasExpandedStorage = info.HasExpandedStorage;
            ExpandedStorageExpiryTime = info.ExpandedStorageExpiryTime;

            Magics = info.Magics;
            for (int i = 0; i < Magics.Count; i++ )
            {
                Magics[i].CastTime += CMain.Time;
            }

            IntelligentCreatures = info.IntelligentCreatures;
            SummonedCreatureType = info.SummonedCreatureType;
            CreatureSummoned = info.CreatureSummoned;
                    */


client > Frames.cs >  #region Player

shared.cs > enums.cs > 
public enum MirDirection : byte
{
    Up = 0,
    UpRight = 1,
    Right = 2,
    DownRight = 3,
    Down = 4,
    DownLeft = 5,
    Left = 6,
    UpLeft = 7
}

=>
public enum ExineDirection : byte
{
    Up = 0,
    Right = 1,
    Down = 2,
    Left = 3,
    UpRight = 5,
    DownRight = 6,
    DownLeft = 7,
    UpLeft = 8
}



////////////////
irObjects > frames.cs > action - frame in

irObjects > PlayerObject.cs > SetLibraries() > switch (CurrentAction)
 wwwkangc